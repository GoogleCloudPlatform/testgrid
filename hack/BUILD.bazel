package(default_visibility = ["//visibility:public"])

py_test(
    name = "coalesce_test",
    size = "small",
    srcs = [
        "coalesce.py",
        "coalesce_test.py",
    ],
    python_version = "PY3",
)

py_test(
    name = "verify_boilerplate",
    srcs = ["verify_boilerplate.py"],
    data = ["//:all-srcs"],
    python_version = "PY3",
    tags = ["lint"],
)

MISSPELL = "@com_github_client9_misspell//cmd/misspell"

sh_test(
    name = "verify-spelling",
    srcs = ["verify-spelling.sh"],
    args = [
        "$(location %s)" % MISSPELL,
        "--error",
    ],
    data = [
        "@//:all-srcs",
        MISSPELL,
    ],
    tags = ["lint"],
)

sh_binary(
    name = "update-spelling",
    srcs = ["update-spelling.sh"],
    args = [
        "$(location %s)" % MISSPELL,
        "-w",
    ],
    data = [
        "@//:all-srcs",
        MISSPELL,
    ],
    tags = ["lint"],
)

protoc = "@com_google_protobuf//:protoc"

protoc_gen_go = "@com_github_golang_protobuf//protoc-gen-go"

protoc_grpc = "plugins=grpc"

# Use the protoc go_out plugin parameter to map the proto import path to the
# Go package import path. Each mapping entry is prefixed with the keyword "M".
# Reference the https://github.com/golang/protobuf "Parameters" section.
proto_importmap = ",".join([
    "Mpb/config/config.proto=github.com/GoogleCloudPlatform/testgrid/pb/config",
    "Mpb/custom_evaluator/custom_evaluator.proto=github.com/GoogleCloudPlatform/testgrid/pb/custom_evaluator",
    "Mpb/response/types.proto=github.com/GoogleCloudPlatform/testgrid/pb/response",
    "Mpb/state/state.proto=github.com/GoogleCloudPlatform/testgrid/pb/state",
    "Mpb/summary/summary.proto=github.com/GoogleCloudPlatform/testgrid/pb/summary",
    "Mpb/test_status/test_status.proto=github.com/GoogleCloudPlatform/testgrid/pb/test_status",
    "Mpb/updater/updater.proto=github.com/GoogleCloudPlatform/testgrid/pb/updater",
])

sh_binary(
    name = "update-protos",
    srcs = ["update-protos.sh"],
    args = [
        "$(location %s)" % protoc,
        "$(location %s)" % protoc_gen_go,
        "$(location %s)" % ":boilerplate/boilerplate.generated.go.txt",
        protoc_grpc,
        proto_importmap,
    ],
    data = [
        ":boilerplate/boilerplate.generated.go.txt",
        "//:all-srcs",
        "@com_google_protobuf//:timestamp_proto",
        protoc,
        protoc_gen_go,
    ],
    tags = ["local"],
)

sh_test(
    name = "verify-protos",
    srcs = ["verify-protos.sh"],
    args = [
        "$(location %s)" % ":update-protos",
        "$(location %s)" % protoc,
        "$(location %s)" % protoc_gen_go,
        "$(location %s)" % ":boilerplate/boilerplate.generated.go.txt",
        protoc_grpc,
        proto_importmap,
    ],
    data = [
        ":boilerplate/boilerplate.generated.go.txt",
        ":update-protos",
        "@com_google_protobuf//:timestamp_proto",
        protoc,
        protoc_gen_go,
        "@//:all-srcs",
    ],
    tags = ["lint"],
)

test_suite(
    name = "verify-all",
    tests = [
        ":verify-linters",
        # "@io_k8s_repo_infra//hack:verify-all", # TODO(fejta): golangci-lint
        "@io_k8s_repo_infra//hack:verify-bazel",
        # "@io_k8s_repo_infra//hack:verify-boilerplate", TODO(gmccloskey): make more flexible across repos
        "@io_k8s_repo_infra//hack:verify-deps",
        "@io_k8s_repo_infra//hack:verify-gofmt",
    ],
)

test_suite(
    name = "verify-linters",
    tags = ["lint"],  # picks up all non-manual targets with this tag
)

filegroup(
    name = "package-srcs",
    srcs = glob(["**"]),
    tags = ["automanaged"],
    visibility = ["//visibility:private"],
)

filegroup(
    name = "all-srcs",
    srcs = [":package-srcs"],
    tags = ["automanaged"],
    visibility = ["//visibility:public"],
)
