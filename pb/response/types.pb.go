/*
Copyright The TestGrid Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

//
//Copyright 2019 The Kubernetes Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.11.4
// source: types.proto

package response

import (
	config "github.com/GoogleCloudPlatform/testgrid/pb/config"
	summary "github.com/GoogleCloudPlatform/testgrid/pb/summary"
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// PhaseTimer times the duration of each update cycle.
type PhaseTimer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start  int32     `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	Last   int32     `protobuf:"varint,2,opt,name=last,proto3" json:"last,omitempty"`
	Phases []string  `protobuf:"bytes,3,rep,name=phases,proto3" json:"phases,omitempty"`
	Delta  []float64 `protobuf:"fixed64,4,rep,packed,name=delta,proto3" json:"delta,omitempty"`
	Total  float64   `protobuf:"fixed64,5,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *PhaseTimer) Reset() {
	*x = PhaseTimer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhaseTimer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhaseTimer) ProtoMessage() {}

func (x *PhaseTimer) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhaseTimer.ProtoReflect.Descriptor instead.
func (*PhaseTimer) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{0}
}

func (x *PhaseTimer) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *PhaseTimer) GetLast() int32 {
	if x != nil {
		return x.Last
	}
	return 0
}

func (x *PhaseTimer) GetPhases() []string {
	if x != nil {
		return x.Phases
	}
	return nil
}

func (x *PhaseTimer) GetDelta() []float64 {
	if x != nil {
		return x.Delta
	}
	return nil
}

func (x *PhaseTimer) GetTotal() float64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type TestAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FailBuildId    string `protobuf:"bytes,1,opt,name=fail_build_id,json=fail-build-id,proto3" json:"fail_build_id,omitempty"`
	FailCount      int64  `protobuf:"varint,2,opt,name=fail_count,json=fail-count,proto3" json:"fail_count,omitempty"`
	FailTime       int32  `protobuf:"varint,3,opt,name=fail_time,json=fail-time,proto3" json:"fail_time,omitempty"`
	Text           string `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	Message        string `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	LinkText       string `protobuf:"bytes,6,opt,name=link_text,json=link-text,proto3" json:"link_text,omitempty"`
	Link           string `protobuf:"bytes,7,opt,name=link,proto3" json:"link,omitempty"`
	UrlText        string `protobuf:"bytes,8,opt,name=url_text,json=url-text,proto3" json:"url_text,omitempty"`
	TestId         string `protobuf:"bytes,9,opt,name=test_id,json=test-id,proto3" json:"test_id,omitempty"`
	PassBuildId    string `protobuf:"bytes,10,opt,name=pass_build_id,json=pass-build-id,proto3" json:"pass_build_id,omitempty"`
	PassCount      int64  `protobuf:"varint,11,opt,name=pass_count,json=pass-count,proto3" json:"pass_count,omitempty"`
	PassTime       int32  `protobuf:"varint,12,opt,name=pass_time,json=pass-time,proto3" json:"pass_time,omitempty"`
	CodeSearchPath string `protobuf:"bytes,13,opt,name=code_search_path,json=code-search-path,proto3" json:"code_search_path,omitempty"`
	TestName       string `protobuf:"bytes,14,opt,name=test_name,json=test-name,proto3" json:"test_name,omitempty"`
}

func (x *TestAlert) Reset() {
	*x = TestAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestAlert) ProtoMessage() {}

func (x *TestAlert) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestAlert.ProtoReflect.Descriptor instead.
func (*TestAlert) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{1}
}

func (x *TestAlert) GetFailBuildId() string {
	if x != nil {
		return x.FailBuildId
	}
	return ""
}

func (x *TestAlert) GetFailCount() int64 {
	if x != nil {
		return x.FailCount
	}
	return 0
}

func (x *TestAlert) GetFailTime() int32 {
	if x != nil {
		return x.FailTime
	}
	return 0
}

func (x *TestAlert) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *TestAlert) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TestAlert) GetLinkText() string {
	if x != nil {
		return x.LinkText
	}
	return ""
}

func (x *TestAlert) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *TestAlert) GetUrlText() string {
	if x != nil {
		return x.UrlText
	}
	return ""
}

func (x *TestAlert) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

func (x *TestAlert) GetPassBuildId() string {
	if x != nil {
		return x.PassBuildId
	}
	return ""
}

func (x *TestAlert) GetPassCount() int64 {
	if x != nil {
		return x.PassCount
	}
	return 0
}

func (x *TestAlert) GetPassTime() int32 {
	if x != nil {
		return x.PassTime
	}
	return 0
}

func (x *TestAlert) GetCodeSearchPath() string {
	if x != nil {
		return x.CodeSearchPath
	}
	return ""
}

func (x *TestAlert) GetTestName() string {
	if x != nil {
		return x.TestName
	}
	return ""
}

// RleStatus represents a run-length encoded test status:
// a run of Count cells with status Value.
type RleStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Value int32 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *RleStatus) Reset() {
	*x = RleStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RleStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RleStatus) ProtoMessage() {}

func (x *RleStatus) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RleStatus.ProtoReflect.Descriptor instead.
func (*RleStatus) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{2}
}

func (x *RleStatus) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *RleStatus) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type RawMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// A sparse encoding of densely stored values. The layout encodes the cycle
	// indices of the values in the value field below. The layout contains indices
	// followed by counts. The indices specify test cycles where contiguous
	// sequences of values start.
	Layout []int32 `protobuf:"varint,2,rep,packed,name=layout,proto3" json:"layout,omitempty"`
	// Non-empty values for each test result.
	Value []float64 `protobuf:"fixed64,3,rep,packed,name=value,proto3" json:"value,omitempty"`
}

func (x *RawMetric) Reset() {
	*x = RawMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawMetric) ProtoMessage() {}

func (x *RawMetric) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawMetric.ProtoReflect.Descriptor instead.
func (*RawMetric) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{3}
}

func (x *RawMetric) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RawMetric) GetLayout() []int32 {
	if x != nil {
		return x.Layout
	}
	return nil
}

func (x *RawMetric) GetValue() []float64 {
	if x != nil {
		return x.Value
	}
	return nil
}

type Graph struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metric string          `protobuf:"bytes,1,opt,name=metric,proto3" json:"metric,omitempty"`
	Names  []string        `protobuf:"bytes,2,rep,name=names,proto3" json:"names,omitempty"`
	Labels []string        `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty"`
	Values []*Graph_Values `protobuf:"bytes,4,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *Graph) Reset() {
	*x = Graph{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Graph) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Graph) ProtoMessage() {}

func (x *Graph) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Graph.ProtoReflect.Descriptor instead.
func (*Graph) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{4}
}

func (x *Graph) GetMetric() string {
	if x != nil {
		return x.Metric
	}
	return ""
}

func (x *Graph) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *Graph) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Graph) GetValues() []*Graph_Values {
	if x != nil {
		return x.Values
	}
	return nil
}

// Row describes a test row.
type Row struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	OriginalName      string       `protobuf:"bytes,2,opt,name=original_name,json=original-name,proto3" json:"original_name,omitempty"`
	Alert             *TestAlert   `protobuf:"bytes,3,opt,name=alert,proto3" json:"alert,omitempty"`
	LinkedBugs        []string     `protobuf:"bytes,4,rep,name=linked_bugs,json=linkedBugs,proto3" json:"linked_bugs,omitempty"`
	Messages          []string     `protobuf:"bytes,5,rep,name=messages,proto3" json:"messages,omitempty"`
	ShortTexts        []string     `protobuf:"bytes,6,rep,name=short_texts,json=shortTexts,proto3" json:"short_texts,omitempty"`
	TestIds           []string     `protobuf:"bytes,7,rep,name=test_ids,json=testIds,proto3" json:"test_ids,omitempty"`
	ShortTestIds      []int64      `protobuf:"varint,8,rep,packed,name=short_test_ids,json=shortTestIds,proto3" json:"short_test_ids,omitempty"`
	Statuses          []*RleStatus `protobuf:"bytes,9,rep,name=statuses,proto3" json:"statuses,omitempty"`
	Target            string       `protobuf:"bytes,10,opt,name=target,proto3" json:"target,omitempty"`
	Tests             []*Row       `protobuf:"bytes,11,rep,name=tests,proto3" json:"tests,omitempty"`
	TabularNameGroups []string     `protobuf:"bytes,12,rep,name=tabular_name_groups,json=tabular-name-groups,proto3" json:"tabular_name_groups,omitempty"`
	MetricInfo        []*RawMetric `protobuf:"bytes,13,rep,name=metric_info,json=-,proto3" json:"metric_info,omitempty"`
	Graphs            []*Graph     `protobuf:"bytes,14,rep,name=graphs,proto3" json:"graphs,omitempty"`
}

func (x *Row) Reset() {
	*x = Row{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Row) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Row) ProtoMessage() {}

func (x *Row) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Row.ProtoReflect.Descriptor instead.
func (*Row) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{5}
}

func (x *Row) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Row) GetOriginalName() string {
	if x != nil {
		return x.OriginalName
	}
	return ""
}

func (x *Row) GetAlert() *TestAlert {
	if x != nil {
		return x.Alert
	}
	return nil
}

func (x *Row) GetLinkedBugs() []string {
	if x != nil {
		return x.LinkedBugs
	}
	return nil
}

func (x *Row) GetMessages() []string {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *Row) GetShortTexts() []string {
	if x != nil {
		return x.ShortTexts
	}
	return nil
}

func (x *Row) GetTestIds() []string {
	if x != nil {
		return x.TestIds
	}
	return nil
}

func (x *Row) GetShortTestIds() []int64 {
	if x != nil {
		return x.ShortTestIds
	}
	return nil
}

func (x *Row) GetStatuses() []*RleStatus {
	if x != nil {
		return x.Statuses
	}
	return nil
}

func (x *Row) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *Row) GetTests() []*Row {
	if x != nil {
		return x.Tests
	}
	return nil
}

func (x *Row) GetTabularNameGroups() []string {
	if x != nil {
		return x.TabularNameGroups
	}
	return nil
}

func (x *Row) GetMetricInfo() []*RawMetric {
	if x != nil {
		return x.MetricInfo
	}
	return nil
}

func (x *Row) GetGraphs() []*Graph {
	if x != nil {
		return x.Graphs
	}
	return nil
}

type TestMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BugComponent int32    `protobuf:"varint,1,opt,name=bug_component,json=bug-component,proto3" json:"bug_component,omitempty"`
	Owner        string   `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	Cc           []string `protobuf:"bytes,3,rep,name=cc,proto3" json:"cc,omitempty"`
}

func (x *TestMetadata) Reset() {
	*x = TestMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestMetadata) ProtoMessage() {}

func (x *TestMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestMetadata.ProtoReflect.Descriptor instead.
func (*TestMetadata) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{6}
}

func (x *TestMetadata) GetBugComponent() int32 {
	if x != nil {
		return x.BugComponent
	}
	return 0
}

func (x *TestMetadata) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *TestMetadata) GetCc() []string {
	if x != nil {
		return x.Cc
	}
	return nil
}

// Response has all the fields expected by TestGrid's javascript client.
// It represents a grid of test results, with additional annotations for metadata.
type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Display the Test Group name
	TestGroupName string `protobuf:"bytes,1,opt,name=test_group_name,json=test-group-name,proto3" json:"test_group_name,omitempty"`
	QueryParam    string `protobuf:"bytes,2,opt,name=query_param,json=query,proto3" json:"query_param,omitempty"`
	Status        string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	// The duration of each update cycle
	PhaseTimer *PhaseTimer `protobuf:"bytes,4,opt,name=phase_timer,json=phase-timer,proto3" json:"phase_timer,omitempty"`
	// Boolean to determine if the response is loaded from a cache
	Cached            bool                      `protobuf:"varint,5,opt,name=cached,proto3" json:"cached,omitempty"`
	Summary           string                    `protobuf:"bytes,6,opt,name=summary,proto3" json:"summary,omitempty"`
	Bugs              map[string]string         `protobuf:"bytes,7,rep,name=bugs,proto3" json:"bugs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	BuildIds          []string                  `protobuf:"bytes,8,rep,name=build_ids,json=build-ids,proto3" json:"build_ids,omitempty"`
	ColumnIds         []string                  `protobuf:"bytes,9,rep,name=column_ids,json=columnIds,proto3" json:"column_ids,omitempty"`
	CustomColumns     []*Response_CustomColumns `protobuf:"bytes,10,rep,name=custom_columns,json=custom-columns,proto3" json:"custom_columns,omitempty"`
	ColumnHeaderNames []string                  `protobuf:"bytes,11,rep,name=column_header_names,json=column-header-names,proto3" json:"column_header_names,omitempty"`
	Groups            []string                  `protobuf:"bytes,12,rep,name=groups,proto3" json:"groups,omitempty"`
	Metrics           []string                  `protobuf:"bytes,13,rep,name=metrics,proto3" json:"metrics,omitempty"`
	Tests             []*Row                    `protobuf:"bytes,14,rep,name=tests,proto3" json:"tests,omitempty"`
	// Client wants nullable strings here
	RowIds     []string `protobuf:"bytes,15,rep,name=row_ids,json=rowIds,proto3" json:"row_ids,omitempty"`
	Timestamps []int64  `protobuf:"varint,16,rep,packed,name=timestamps,proto3" json:"timestamps,omitempty"`
	// Lookup map for shortening long test IDs in each row.
	TestIdMap                 map[int64]string                      `protobuf:"bytes,17,rep,name=test_id_map,json=testIdMap,proto3" json:"test_id_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TestMetadata              map[string]*TestMetadata              `protobuf:"bytes,18,rep,name=test_metadata,json=test-metadata,proto3" json:"test_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StaleTestThreshold        int32                                 `protobuf:"varint,19,opt,name=stale_test_threshold,json=stale-test-threshold,proto3" json:"stale_test_threshold,omitempty"`
	NumStaleTests             int64                                 `protobuf:"varint,20,opt,name=num_stale_tests,json=num-stale-tests,proto3" json:"num_stale_tests,omitempty"`
	Alerts                    string                                `protobuf:"bytes,21,opt,name=alerts,proto3" json:"alerts,omitempty"`
	AddTabularNamesOption     bool                                  `protobuf:"varint,22,opt,name=add_tabular_names_option,json=add-tabular-names-option,proto3" json:"add_tabular_names_option,omitempty"`
	ShowTabularNames          bool                                  `protobuf:"varint,23,opt,name=show_tabular_names,json=show-tabular-names,proto3" json:"show_tabular_names,omitempty"`
	TabularNamesColumnHeaders []string                              `protobuf:"bytes,24,rep,name=tabular_names_column_headers,json=tabular-names-column-headers,proto3" json:"tabular_names_column_headers,omitempty"`
	Description               string                                `protobuf:"bytes,25,opt,name=description,proto3" json:"description,omitempty"`
	BugComponent              int32                                 `protobuf:"varint,26,opt,name=bug_component,json=bug-component,proto3" json:"bug_component,omitempty"`
	CodeSearchPath            string                                `protobuf:"bytes,27,opt,name=code_search_path,json=code-search-path,proto3" json:"code_search_path,omitempty"`
	OpenTestTemplate          *config.LinkTemplate                  `protobuf:"bytes,28,opt,name=open_test_template,json=open-test-template,proto3" json:"open_test_template,omitempty"`
	FileBugTemplate           *config.LinkTemplate                  `protobuf:"bytes,29,opt,name=file_bug_template,json=file-bug-template,proto3" json:"file_bug_template,omitempty"`
	AttachBugTemplate         *config.LinkTemplate                  `protobuf:"bytes,30,opt,name=attach_bug_template,json=attach-bug-template,proto3" json:"attach_bug_template,omitempty"`
	ResultsUrlTemplate        *config.LinkTemplate                  `protobuf:"bytes,31,opt,name=results_url_template,json=results-url-template,proto3" json:"results_url_template,omitempty"`
	CodeSearchUrlTemplate     *config.LinkTemplate                  `protobuf:"bytes,32,opt,name=code_search_url_template,json=code-search-url-template,proto3" json:"code_search_url_template,omitempty"`
	OpenBugTemplate           *config.LinkTemplate                  `protobuf:"bytes,33,opt,name=open_bug_template,json=open-bug-template,proto3" json:"open_bug_template,omitempty"`
	AboutDashboardUrl         string                                `protobuf:"bytes,34,opt,name=about_dashboard_url,json=about-dashboard-url,proto3" json:"about_dashboard_url,omitempty"`
	ResultsText               string                                `protobuf:"bytes,35,opt,name=results_text,json=results-text,proto3" json:"results_text,omitempty"`
	LatestGreen               string                                `protobuf:"bytes,36,opt,name=latest_green,json=latest-green,proto3" json:"latest_green,omitempty"`
	TriageEnabled             bool                                  `protobuf:"varint,37,opt,name=triage_enabled,json=triage-enabled,proto3" json:"triage_enabled,omitempty"`
	Notifications             []*config.Notification                `protobuf:"bytes,38,rep,name=notifications,proto3" json:"notifications,omitempty"`
	TestGroup                 *config.TestGroup                     `protobuf:"bytes,39,opt,name=test_group,json=-,proto3" json:"test_group,omitempty"`
	DashboardTab              *config.DashboardTab                  `protobuf:"bytes,40,opt,name=dashboard_tab,json=-,proto3" json:"dashboard_tab,omitempty"`
	OverallStatus             summary.DashboardTabSummary_TabStatus `protobuf:"varint,41,opt,name=overall_status,json=overall-status,proto3,enum=DashboardTabSummary_TabStatus" json:"overall_status,omitempty"`
	DashboardName             string                                `protobuf:"bytes,42,opt,name=dashboard_name,json=dashboardName,proto3" json:"dashboard_name,omitempty"`
	UpdateTimestamp           int64                                 `protobuf:"varint,43,opt,name=update_timestamp,json=updateTimestamp,proto3" json:"update_timestamp,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{7}
}

func (x *Response) GetTestGroupName() string {
	if x != nil {
		return x.TestGroupName
	}
	return ""
}

func (x *Response) GetQueryParam() string {
	if x != nil {
		return x.QueryParam
	}
	return ""
}

func (x *Response) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Response) GetPhaseTimer() *PhaseTimer {
	if x != nil {
		return x.PhaseTimer
	}
	return nil
}

func (x *Response) GetCached() bool {
	if x != nil {
		return x.Cached
	}
	return false
}

func (x *Response) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *Response) GetBugs() map[string]string {
	if x != nil {
		return x.Bugs
	}
	return nil
}

func (x *Response) GetBuildIds() []string {
	if x != nil {
		return x.BuildIds
	}
	return nil
}

func (x *Response) GetColumnIds() []string {
	if x != nil {
		return x.ColumnIds
	}
	return nil
}

func (x *Response) GetCustomColumns() []*Response_CustomColumns {
	if x != nil {
		return x.CustomColumns
	}
	return nil
}

func (x *Response) GetColumnHeaderNames() []string {
	if x != nil {
		return x.ColumnHeaderNames
	}
	return nil
}

func (x *Response) GetGroups() []string {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *Response) GetMetrics() []string {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *Response) GetTests() []*Row {
	if x != nil {
		return x.Tests
	}
	return nil
}

func (x *Response) GetRowIds() []string {
	if x != nil {
		return x.RowIds
	}
	return nil
}

func (x *Response) GetTimestamps() []int64 {
	if x != nil {
		return x.Timestamps
	}
	return nil
}

func (x *Response) GetTestIdMap() map[int64]string {
	if x != nil {
		return x.TestIdMap
	}
	return nil
}

func (x *Response) GetTestMetadata() map[string]*TestMetadata {
	if x != nil {
		return x.TestMetadata
	}
	return nil
}

func (x *Response) GetStaleTestThreshold() int32 {
	if x != nil {
		return x.StaleTestThreshold
	}
	return 0
}

func (x *Response) GetNumStaleTests() int64 {
	if x != nil {
		return x.NumStaleTests
	}
	return 0
}

func (x *Response) GetAlerts() string {
	if x != nil {
		return x.Alerts
	}
	return ""
}

func (x *Response) GetAddTabularNamesOption() bool {
	if x != nil {
		return x.AddTabularNamesOption
	}
	return false
}

func (x *Response) GetShowTabularNames() bool {
	if x != nil {
		return x.ShowTabularNames
	}
	return false
}

func (x *Response) GetTabularNamesColumnHeaders() []string {
	if x != nil {
		return x.TabularNamesColumnHeaders
	}
	return nil
}

func (x *Response) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Response) GetBugComponent() int32 {
	if x != nil {
		return x.BugComponent
	}
	return 0
}

func (x *Response) GetCodeSearchPath() string {
	if x != nil {
		return x.CodeSearchPath
	}
	return ""
}

func (x *Response) GetOpenTestTemplate() *config.LinkTemplate {
	if x != nil {
		return x.OpenTestTemplate
	}
	return nil
}

func (x *Response) GetFileBugTemplate() *config.LinkTemplate {
	if x != nil {
		return x.FileBugTemplate
	}
	return nil
}

func (x *Response) GetAttachBugTemplate() *config.LinkTemplate {
	if x != nil {
		return x.AttachBugTemplate
	}
	return nil
}

func (x *Response) GetResultsUrlTemplate() *config.LinkTemplate {
	if x != nil {
		return x.ResultsUrlTemplate
	}
	return nil
}

func (x *Response) GetCodeSearchUrlTemplate() *config.LinkTemplate {
	if x != nil {
		return x.CodeSearchUrlTemplate
	}
	return nil
}

func (x *Response) GetOpenBugTemplate() *config.LinkTemplate {
	if x != nil {
		return x.OpenBugTemplate
	}
	return nil
}

func (x *Response) GetAboutDashboardUrl() string {
	if x != nil {
		return x.AboutDashboardUrl
	}
	return ""
}

func (x *Response) GetResultsText() string {
	if x != nil {
		return x.ResultsText
	}
	return ""
}

func (x *Response) GetLatestGreen() string {
	if x != nil {
		return x.LatestGreen
	}
	return ""
}

func (x *Response) GetTriageEnabled() bool {
	if x != nil {
		return x.TriageEnabled
	}
	return false
}

func (x *Response) GetNotifications() []*config.Notification {
	if x != nil {
		return x.Notifications
	}
	return nil
}

func (x *Response) GetTestGroup() *config.TestGroup {
	if x != nil {
		return x.TestGroup
	}
	return nil
}

func (x *Response) GetDashboardTab() *config.DashboardTab {
	if x != nil {
		return x.DashboardTab
	}
	return nil
}

func (x *Response) GetOverallStatus() summary.DashboardTabSummary_TabStatus {
	if x != nil {
		return x.OverallStatus
	}
	return summary.DashboardTabSummary_NOT_SET
}

func (x *Response) GetDashboardName() string {
	if x != nil {
		return x.DashboardName
	}
	return ""
}

func (x *Response) GetUpdateTimestamp() int64 {
	if x != nil {
		return x.UpdateTimestamp
	}
	return 0
}

type Graph_Values struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []float64 `protobuf:"fixed64,1,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *Graph_Values) Reset() {
	*x = Graph_Values{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Graph_Values) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Graph_Values) ProtoMessage() {}

func (x *Graph_Values) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Graph_Values.ProtoReflect.Descriptor instead.
func (*Graph_Values) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{4, 0}
}

func (x *Graph_Values) GetValues() []float64 {
	if x != nil {
		return x.Values
	}
	return nil
}

type Response_CustomColumns struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomColumns []string `protobuf:"bytes,1,rep,name=custom_columns,json=customColumns,proto3" json:"custom_columns,omitempty"`
}

func (x *Response_CustomColumns) Reset() {
	*x = Response_CustomColumns{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response_CustomColumns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response_CustomColumns) ProtoMessage() {}

func (x *Response_CustomColumns) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response_CustomColumns.ProtoReflect.Descriptor instead.
func (*Response_CustomColumns) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{7, 1}
}

func (x *Response_CustomColumns) GetCustomColumns() []string {
	if x != nil {
		return x.CustomColumns
	}
	return nil
}

var File_types_proto protoreflect.FileDescriptor

var file_types_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x70,
	0x62, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x70, 0x62, 0x2f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x2f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x7a, 0x0a, 0x0a, 0x50, 0x68, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x68, 0x61, 0x73, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x70, 0x68, 0x61, 0x73, 0x65, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x01, 0x52, 0x05,
	0x64, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xb3, 0x03, 0x0a, 0x09,
	0x54, 0x65, 0x73, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x61, 0x69,
	0x6c, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x2d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2d, 0x69, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x61, 0x69, 0x6c, 0x2d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x66, 0x61, 0x69, 0x6c, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x74, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e,
	0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x72, 0x6c, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x72, 0x6c, 0x2d, 0x74, 0x65, 0x78, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x73, 0x74,
	0x2d, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x73, 0x73,
	0x2d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2d, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x73,
	0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70,
	0x61, 0x73, 0x73, 0x2d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x73,
	0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61,
	0x73, 0x73, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x2d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2d, 0x70,
	0x61, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x37, 0x0a, 0x09, 0x52, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x49, 0x0a, 0x09, 0x52, 0x61,
	0x77, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x01, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x05, 0x47, 0x72, 0x61, 0x70, 0x68, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x25, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x20, 0x0a, 0x06,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x01, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xd2,
	0x03, 0x0a, 0x03, 0x52, 0x6f, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x05, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x05, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x62, 0x75, 0x67,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x42,
	0x75, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x54, 0x65, 0x78, 0x74, 0x73,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x54, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x73, 0x12, 0x26, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x52, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x12, 0x1a, 0x0a, 0x05, 0x74, 0x65, 0x73, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x04, 0x2e, 0x52, 0x6f, 0x77, 0x52, 0x05, 0x74, 0x65, 0x73, 0x74, 0x73, 0x12, 0x30, 0x0a,
	0x13, 0x74, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x74, 0x61, 0x62, 0x75,
	0x6c, 0x61, 0x72, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12,
	0x22, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x52, 0x61, 0x77, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x52, 0x01, 0x2d, 0x12, 0x1e, 0x0a, 0x06, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x18, 0x0e, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x06, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x73, 0x22, 0x5a, 0x0a, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x75, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x62, 0x75, 0x67, 0x2d,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12,
	0x0e, 0x0a, 0x02, 0x63, 0x63, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x02, 0x63, 0x63, 0x22,
	0x84, 0x11, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2d, 0x0a, 0x0b, 0x70, 0x68,
	0x61, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x0b, 0x70, 0x68,
	0x61, 0x73, 0x65, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x04, 0x62,
	0x75, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x75, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04,
	0x62, 0x75, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2d, 0x69,
	0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64,
	0x73, 0x12, 0x3f, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x73, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2d, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x13, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x2d, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2d, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x1a, 0x0a, 0x05, 0x74, 0x65, 0x73, 0x74, 0x73, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x04, 0x2e, 0x52, 0x6f, 0x77, 0x52, 0x05, 0x74, 0x65, 0x73,
	0x74, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0f, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x77, 0x49, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x0a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x74, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x4d, 0x61, 0x70, 0x12, 0x41, 0x0a, 0x0d, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x74, 0x65, 0x73, 0x74, 0x2d,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x14, 0x73, 0x74, 0x61, 0x6c,
	0x65, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x2d, 0x74, 0x65,
	0x73, 0x74, 0x2d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x28, 0x0a, 0x0f,
	0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x2d, 0x73, 0x74, 0x61, 0x6c, 0x65,
	0x2d, 0x74, 0x65, 0x73, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x12, 0x3a,
	0x0a, 0x18, 0x61, 0x64, 0x64, 0x5f, 0x74, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x18, 0x61, 0x64, 0x64, 0x2d, 0x74, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x2d, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x68,
	0x6f, 0x77, 0x5f, 0x74, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x73, 0x68, 0x6f, 0x77, 0x2d, 0x74, 0x61, 0x62,
	0x75, 0x6c, 0x61, 0x72, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x1c, 0x74, 0x61,
	0x62, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x1c, 0x74, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x2d,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x2d, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x24, 0x0a, 0x0d, 0x62, 0x75, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x62, 0x75, 0x67, 0x2d, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x2d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2d, 0x70, 0x61,
	0x74, 0x68, 0x12, 0x3d, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x12, 0x6f,
	0x70, 0x65, 0x6e, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x12, 0x3b, 0x0a, 0x11, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x62, 0x75, 0x67, 0x5f, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4c,
	0x69, 0x6e, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x11, 0x66, 0x69, 0x6c,
	0x65, 0x2d, 0x62, 0x75, 0x67, 0x2d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x3f,
	0x0a, 0x13, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x5f, 0x62, 0x75, 0x67, 0x5f, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4c, 0x69,
	0x6e, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x13, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x2d, 0x62, 0x75, 0x67, 0x2d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12,
	0x41, 0x0a, 0x14, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x14, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x2d, 0x75, 0x72, 0x6c, 0x2d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x12, 0x49, 0x0a, 0x18, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x52, 0x18, 0x63, 0x6f, 0x64, 0x65, 0x2d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x2d, 0x75, 0x72, 0x6c, 0x2d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a,
	0x11, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x62, 0x75, 0x67, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x11, 0x6f, 0x70, 0x65, 0x6e, 0x2d, 0x62, 0x75,
	0x67, 0x2d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x61, 0x62,
	0x6f, 0x75, 0x74, 0x5f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x2d, 0x64,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2d, 0x75, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0c,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2d, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x67, 0x72, 0x65, 0x65, 0x6e,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x67,
	0x72, 0x65, 0x65, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x72, 0x69, 0x61, 0x67, 0x65, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x74, 0x72,
	0x69, 0x61, 0x67, 0x65, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x0d,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x26, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x21, 0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x01, 0x2d, 0x12, 0x27, 0x0a, 0x0d, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x5f, 0x74, 0x61, 0x62, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x44, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x54, 0x61, 0x62, 0x52, 0x01, 0x2d, 0x12, 0x46, 0x0a,
	0x0e, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x29, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x54, 0x61, 0x62, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x54, 0x61, 0x62, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x2d, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x2b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x1a, 0x37, 0x0a, 0x09, 0x42, 0x75, 0x67, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x36, 0x0a, 0x0d, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x1a, 0x3c, 0x0a, 0x0e, 0x54, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4e, 0x0a, 0x11, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x23, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0a, 0x5a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_types_proto_rawDescOnce sync.Once
	file_types_proto_rawDescData = file_types_proto_rawDesc
)

func file_types_proto_rawDescGZIP() []byte {
	file_types_proto_rawDescOnce.Do(func() {
		file_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_types_proto_rawDescData)
	})
	return file_types_proto_rawDescData
}

var file_types_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_types_proto_goTypes = []interface{}{
	(*PhaseTimer)(nil),             // 0: PhaseTimer
	(*TestAlert)(nil),              // 1: TestAlert
	(*RleStatus)(nil),              // 2: RleStatus
	(*RawMetric)(nil),              // 3: RawMetric
	(*Graph)(nil),                  // 4: Graph
	(*Row)(nil),                    // 5: Row
	(*TestMetadata)(nil),           // 6: TestMetadata
	(*Response)(nil),               // 7: Response
	(*Graph_Values)(nil),           // 8: Graph.Values
	nil,                            // 9: Response.BugsEntry
	(*Response_CustomColumns)(nil), // 10: Response.CustomColumns
	nil,                            // 11: Response.TestIdMapEntry
	nil,                            // 12: Response.TestMetadataEntry
	(*config.LinkTemplate)(nil),    // 13: LinkTemplate
	(*config.Notification)(nil),    // 14: Notification
	(*config.TestGroup)(nil),       // 15: TestGroup
	(*config.DashboardTab)(nil),    // 16: DashboardTab
	(summary.DashboardTabSummary_TabStatus)(0), // 17: DashboardTabSummary.TabStatus
}
var file_types_proto_depIdxs = []int32{
	8,  // 0: Graph.values:type_name -> Graph.Values
	1,  // 1: Row.alert:type_name -> TestAlert
	2,  // 2: Row.statuses:type_name -> RleStatus
	5,  // 3: Row.tests:type_name -> Row
	3,  // 4: Row.metric_info:type_name -> RawMetric
	4,  // 5: Row.graphs:type_name -> Graph
	0,  // 6: Response.phase_timer:type_name -> PhaseTimer
	9,  // 7: Response.bugs:type_name -> Response.BugsEntry
	10, // 8: Response.custom_columns:type_name -> Response.CustomColumns
	5,  // 9: Response.tests:type_name -> Row
	11, // 10: Response.test_id_map:type_name -> Response.TestIdMapEntry
	12, // 11: Response.test_metadata:type_name -> Response.TestMetadataEntry
	13, // 12: Response.open_test_template:type_name -> LinkTemplate
	13, // 13: Response.file_bug_template:type_name -> LinkTemplate
	13, // 14: Response.attach_bug_template:type_name -> LinkTemplate
	13, // 15: Response.results_url_template:type_name -> LinkTemplate
	13, // 16: Response.code_search_url_template:type_name -> LinkTemplate
	13, // 17: Response.open_bug_template:type_name -> LinkTemplate
	14, // 18: Response.notifications:type_name -> Notification
	15, // 19: Response.test_group:type_name -> TestGroup
	16, // 20: Response.dashboard_tab:type_name -> DashboardTab
	17, // 21: Response.overall_status:type_name -> DashboardTabSummary.TabStatus
	6,  // 22: Response.TestMetadataEntry.value:type_name -> TestMetadata
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_types_proto_init() }
func file_types_proto_init() {
	if File_types_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhaseTimer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RleStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Graph); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Row); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Graph_Values); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response_CustomColumns); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_types_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_types_proto_goTypes,
		DependencyIndexes: file_types_proto_depIdxs,
		MessageInfos:      file_types_proto_msgTypes,
	}.Build()
	File_types_proto = out.File
	file_types_proto_rawDesc = nil
	file_types_proto_goTypes = nil
	file_types_proto_depIdxs = nil
}
