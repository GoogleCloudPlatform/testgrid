/*
Copyright The TestGrid Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.11.4
// source: data.proto

package testgrid_api_v1

import (
	context "context"
	config "github.com/GoogleCloudPlatform/testgrid/pb/config"
	state "github.com/GoogleCloudPlatform/testgrid/pb/state"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ListDashboardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *ListDashboardRequest) Reset() {
	*x = ListDashboardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDashboardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDashboardRequest) ProtoMessage() {}

func (x *ListDashboardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDashboardRequest.ProtoReflect.Descriptor instead.
func (*ListDashboardRequest) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{0}
}

func (x *ListDashboardRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type ListDashboardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dashboards []*Resource `protobuf:"bytes,1,rep,name=dashboards,proto3" json:"dashboards,omitempty"`
}

func (x *ListDashboardResponse) Reset() {
	*x = ListDashboardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDashboardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDashboardResponse) ProtoMessage() {}

func (x *ListDashboardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDashboardResponse.ProtoReflect.Descriptor instead.
func (*ListDashboardResponse) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{1}
}

func (x *ListDashboardResponse) GetDashboards() []*Resource {
	if x != nil {
		return x.Dashboards
	}
	return nil
}

type ListDashboardGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *ListDashboardGroupRequest) Reset() {
	*x = ListDashboardGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDashboardGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDashboardGroupRequest) ProtoMessage() {}

func (x *ListDashboardGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDashboardGroupRequest.ProtoReflect.Descriptor instead.
func (*ListDashboardGroupRequest) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{2}
}

func (x *ListDashboardGroupRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

type ListDashboardGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DashboardGroups []*Resource `protobuf:"bytes,1,rep,name=dashboard_groups,json=dashboardGroups,proto3" json:"dashboard_groups,omitempty"`
}

func (x *ListDashboardGroupResponse) Reset() {
	*x = ListDashboardGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDashboardGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDashboardGroupResponse) ProtoMessage() {}

func (x *ListDashboardGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDashboardGroupResponse.ProtoReflect.Descriptor instead.
func (*ListDashboardGroupResponse) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{3}
}

func (x *ListDashboardGroupResponse) GetDashboardGroups() []*Resource {
	if x != nil {
		return x.DashboardGroups
	}
	return nil
}

type ListDashboardTabsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope     string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Dashboard string `protobuf:"bytes,2,opt,name=dashboard,proto3" json:"dashboard,omitempty"`
}

func (x *ListDashboardTabsRequest) Reset() {
	*x = ListDashboardTabsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDashboardTabsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDashboardTabsRequest) ProtoMessage() {}

func (x *ListDashboardTabsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDashboardTabsRequest.ProtoReflect.Descriptor instead.
func (*ListDashboardTabsRequest) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{4}
}

func (x *ListDashboardTabsRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *ListDashboardTabsRequest) GetDashboard() string {
	if x != nil {
		return x.Dashboard
	}
	return ""
}

type ListDashboardTabsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DashboardTabs []*Resource `protobuf:"bytes,1,rep,name=dashboard_tabs,json=dashboardTabs,proto3" json:"dashboard_tabs,omitempty"`
}

func (x *ListDashboardTabsResponse) Reset() {
	*x = ListDashboardTabsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDashboardTabsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDashboardTabsResponse) ProtoMessage() {}

func (x *ListDashboardTabsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDashboardTabsResponse.ProtoReflect.Descriptor instead.
func (*ListDashboardTabsResponse) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{5}
}

func (x *ListDashboardTabsResponse) GetDashboardTabs() []*Resource {
	if x != nil {
		return x.DashboardTabs
	}
	return nil
}

type GetDashboardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope     string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Dashboard string `protobuf:"bytes,2,opt,name=dashboard,proto3" json:"dashboard,omitempty"`
}

func (x *GetDashboardRequest) Reset() {
	*x = GetDashboardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDashboardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDashboardRequest) ProtoMessage() {}

func (x *GetDashboardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDashboardRequest.ProtoReflect.Descriptor instead.
func (*GetDashboardRequest) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{6}
}

func (x *GetDashboardRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *GetDashboardRequest) GetDashboard() string {
	if x != nil {
		return x.Dashboard
	}
	return ""
}

type GetDashboardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of notifications attached to this dashboard.
	// This is displayed on any dashboard tab in this dashboard.
	Notifications []*config.Notification `protobuf:"bytes,1,rep,name=notifications,proto3" json:"notifications,omitempty"`
	// Control which tab is displayed when first opening a dashboard.
	// Defaults to Summary
	DefaultTab string `protobuf:"bytes,2,opt,name=default_tab,json=defaultTab,proto3" json:"default_tab,omitempty"`
	// Controls whether to suppress highlighting of failing tabs.
	SuppressFailingTabs bool `protobuf:"varint,3,opt,name=suppress_failing_tabs,json=suppressFailingTabs,proto3" json:"suppress_failing_tabs,omitempty"`
	// Controls whether to apply special highlighting to result header columns for
	// the current day.
	HighlightToday bool `protobuf:"varint,4,opt,name=highlight_today,json=highlightToday,proto3" json:"highlight_today,omitempty"`
}

func (x *GetDashboardResponse) Reset() {
	*x = GetDashboardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDashboardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDashboardResponse) ProtoMessage() {}

func (x *GetDashboardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDashboardResponse.ProtoReflect.Descriptor instead.
func (*GetDashboardResponse) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{7}
}

func (x *GetDashboardResponse) GetNotifications() []*config.Notification {
	if x != nil {
		return x.Notifications
	}
	return nil
}

func (x *GetDashboardResponse) GetDefaultTab() string {
	if x != nil {
		return x.DefaultTab
	}
	return ""
}

func (x *GetDashboardResponse) GetSuppressFailingTabs() bool {
	if x != nil {
		return x.SuppressFailingTabs
	}
	return false
}

func (x *GetDashboardResponse) GetHighlightToday() bool {
	if x != nil {
		return x.HighlightToday
	}
	return false
}

type GetDashboardGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope          string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	DashboardGroup string `protobuf:"bytes,2,opt,name=dashboard_group,json=dashboardGroup,proto3" json:"dashboard_group,omitempty"`
}

func (x *GetDashboardGroupRequest) Reset() {
	*x = GetDashboardGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDashboardGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDashboardGroupRequest) ProtoMessage() {}

func (x *GetDashboardGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDashboardGroupRequest.ProtoReflect.Descriptor instead.
func (*GetDashboardGroupRequest) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{8}
}

func (x *GetDashboardGroupRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *GetDashboardGroupRequest) GetDashboardGroup() string {
	if x != nil {
		return x.DashboardGroup
	}
	return ""
}

type GetDashboardGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dashboards []*Resource `protobuf:"bytes,1,rep,name=dashboards,proto3" json:"dashboards,omitempty"`
}

func (x *GetDashboardGroupResponse) Reset() {
	*x = GetDashboardGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDashboardGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDashboardGroupResponse) ProtoMessage() {}

func (x *GetDashboardGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDashboardGroupResponse.ProtoReflect.Descriptor instead.
func (*GetDashboardGroupResponse) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{9}
}

func (x *GetDashboardGroupResponse) GetDashboards() []*Resource {
	if x != nil {
		return x.Dashboards
	}
	return nil
}

type ListHeadersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope     string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Dashboard string `protobuf:"bytes,2,opt,name=dashboard,proto3" json:"dashboard,omitempty"`
	Tab       string `protobuf:"bytes,3,opt,name=tab,proto3" json:"tab,omitempty"`
}

func (x *ListHeadersRequest) Reset() {
	*x = ListHeadersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListHeadersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHeadersRequest) ProtoMessage() {}

func (x *ListHeadersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHeadersRequest.ProtoReflect.Descriptor instead.
func (*ListHeadersRequest) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{10}
}

func (x *ListHeadersRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *ListHeadersRequest) GetDashboard() string {
	if x != nil {
		return x.Dashboard
	}
	return ""
}

func (x *ListHeadersRequest) GetTab() string {
	if x != nil {
		return x.Tab
	}
	return ""
}

type ListHeadersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Headers []*ListHeadersResponse_Header `protobuf:"bytes,1,rep,name=headers,proto3" json:"headers,omitempty"`
}

func (x *ListHeadersResponse) Reset() {
	*x = ListHeadersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListHeadersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHeadersResponse) ProtoMessage() {}

func (x *ListHeadersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHeadersResponse.ProtoReflect.Descriptor instead.
func (*ListHeadersResponse) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{11}
}

func (x *ListHeadersResponse) GetHeaders() []*ListHeadersResponse_Header {
	if x != nil {
		return x.Headers
	}
	return nil
}

type ListRowsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope     string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Dashboard string `protobuf:"bytes,2,opt,name=dashboard,proto3" json:"dashboard,omitempty"`
	Tab       string `protobuf:"bytes,3,opt,name=tab,proto3" json:"tab,omitempty"`
}

func (x *ListRowsRequest) Reset() {
	*x = ListRowsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRowsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRowsRequest) ProtoMessage() {}

func (x *ListRowsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRowsRequest.ProtoReflect.Descriptor instead.
func (*ListRowsRequest) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{12}
}

func (x *ListRowsRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *ListRowsRequest) GetDashboard() string {
	if x != nil {
		return x.Dashboard
	}
	return ""
}

func (x *ListRowsRequest) GetTab() string {
	if x != nil {
		return x.Tab
	}
	return ""
}

type ListRowsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rows []*ListRowsResponse_Row `protobuf:"bytes,1,rep,name=rows,proto3" json:"rows,omitempty"`
}

func (x *ListRowsResponse) Reset() {
	*x = ListRowsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRowsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRowsResponse) ProtoMessage() {}

func (x *ListRowsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRowsResponse.ProtoReflect.Descriptor instead.
func (*ListRowsResponse) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{13}
}

func (x *ListRowsResponse) GetRows() []*ListRowsResponse_Row {
	if x != nil {
		return x.Rows
	}
	return nil
}

// A Resource is a REST resource, often returned by a LIST command
// It includes the name of the resource and a link to the resource
type Resource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Link string `protobuf:"bytes,2,opt,name=link,proto3" json:"link,omitempty"`
}

func (x *Resource) Reset() {
	*x = Resource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resource) ProtoMessage() {}

func (x *Resource) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resource.ProtoReflect.Descriptor instead.
func (*Resource) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{14}
}

func (x *Resource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Resource) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

type ListHeadersResponse_Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique instance of the job, typically BUILD_NUMBER from prow or a guid
	Build string `protobuf:"bytes,1,opt,name=build,proto3" json:"build,omitempty"`
	// Name associated with the column (such as the run/invocation ID). No two
	// columns should have the same build_id and name. The name field allows the
	// display of multiple columns with the same build_id.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// When the build started running
	Started *timestamp.Timestamp `protobuf:"bytes,3,opt,name=started,proto3" json:"started,omitempty"`
	// Additional custom headers like commit, image used, etc.
	Extra []string `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty"`
	// Custom hotlist ids.
	HotlistIds string `protobuf:"bytes,5,opt,name=hotlist_ids,json=hotlistIds,proto3" json:"hotlist_ids,omitempty"`
}

func (x *ListHeadersResponse_Header) Reset() {
	*x = ListHeadersResponse_Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListHeadersResponse_Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHeadersResponse_Header) ProtoMessage() {}

func (x *ListHeadersResponse_Header) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHeadersResponse_Header.ProtoReflect.Descriptor instead.
func (*ListHeadersResponse_Header) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{11, 0}
}

func (x *ListHeadersResponse_Header) GetBuild() string {
	if x != nil {
		return x.Build
	}
	return ""
}

func (x *ListHeadersResponse_Header) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListHeadersResponse_Header) GetStarted() *timestamp.Timestamp {
	if x != nil {
		return x.Started
	}
	return nil
}

func (x *ListHeadersResponse_Header) GetExtra() []string {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *ListHeadersResponse_Header) GetHotlistIds() string {
	if x != nil {
		return x.HotlistIds
	}
	return ""
}

type ListRowsResponse_Row struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Display name of the test case
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Historical results of the test case. Unencoded.
	Cells []*ListRowsResponse_Cell `protobuf:"bytes,2,rep,name=cells,proto3" json:"cells,omitempty"`
	// Issue or Bug IDs associated with the test case
	Issues []string `protobuf:"bytes,3,rep,name=issues,proto3" json:"issues,omitempty"`
	// Alert associated with the test case
	Alert *state.AlertInfo `protobuf:"bytes,4,opt,name=alert,proto3" json:"alert,omitempty"`
}

func (x *ListRowsResponse_Row) Reset() {
	*x = ListRowsResponse_Row{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRowsResponse_Row) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRowsResponse_Row) ProtoMessage() {}

func (x *ListRowsResponse_Row) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRowsResponse_Row.ProtoReflect.Descriptor instead.
func (*ListRowsResponse_Row) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{13, 0}
}

func (x *ListRowsResponse_Row) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListRowsResponse_Row) GetCells() []*ListRowsResponse_Cell {
	if x != nil {
		return x.Cells
	}
	return nil
}

func (x *ListRowsResponse_Row) GetIssues() []string {
	if x != nil {
		return x.Issues
	}
	return nil
}

func (x *ListRowsResponse_Row) GetAlert() *state.AlertInfo {
	if x != nil {
		return x.Alert
	}
	return nil
}

type ListRowsResponse_Cell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result  int32  `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	CellId  string `protobuf:"bytes,2,opt,name=cell_id,json=cellId,proto3" json:"cell_id,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Icon    string `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`
}

func (x *ListRowsResponse_Cell) Reset() {
	*x = ListRowsResponse_Cell{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRowsResponse_Cell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRowsResponse_Cell) ProtoMessage() {}

func (x *ListRowsResponse_Cell) ProtoReflect() protoreflect.Message {
	mi := &file_data_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRowsResponse_Cell.ProtoReflect.Descriptor instead.
func (*ListRowsResponse_Cell) Descriptor() ([]byte, []int) {
	return file_data_proto_rawDescGZIP(), []int{13, 1}
}

func (x *ListRowsResponse_Cell) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *ListRowsResponse_Cell) GetCellId() string {
	if x != nil {
		return x.CellId
	}
	return ""
}

func (x *ListRowsResponse_Cell) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListRowsResponse_Cell) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

var File_data_proto protoreflect.FileDescriptor

var file_data_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x74, 0x65,
	0x73, 0x74, 0x67, 0x72, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16,
	0x70, 0x62, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x70, 0x62, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2c, 0x0a, 0x14,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0x52, 0x0a, 0x15, 0x4c, 0x69,
	0x73, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x67, 0x72,
	0x69, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x0a, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x22, 0x31,
	0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x22, 0x62, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x44, 0x0a, 0x10, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x67, 0x72, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x0f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x4e, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x54, 0x61, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x22, 0x5d, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x54, 0x61, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f,
	0x74, 0x61, 0x62, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x67, 0x72, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0d, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x54, 0x61, 0x62, 0x73, 0x22, 0x49, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x22,
	0xc9, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x61, 0x62, 0x12, 0x32,
	0x0a, 0x15, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x61, 0x62, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x73,
	0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x46, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x61,
	0x62, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f,
	0x74, 0x6f, 0x64, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x68, 0x69, 0x67,
	0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x22, 0x59, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x56, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x44, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x67, 0x72,
	0x69, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x0a, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x22, 0x5a,
	0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x62, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x62, 0x22, 0xfe, 0x01, 0x0a, 0x13, 0x4c,
	0x69, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x45, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x67, 0x72, 0x69, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x1a, 0x9f, 0x01, 0x0a, 0x06, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34,
	0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x6f,
	0x74, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x68, 0x6f, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x73, 0x22, 0x57, 0x0a, 0x0f, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x74, 0x61, 0x62, 0x22, 0xc8, 0x02, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x77,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x72, 0x6f, 0x77,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x67, 0x72,
	0x69, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f,
	0x77, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x6f, 0x77, 0x52, 0x04,
	0x72, 0x6f, 0x77, 0x73, 0x1a, 0x91, 0x01, 0x0a, 0x03, 0x52, 0x6f, 0x77, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x3c, 0x0a, 0x05, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x67, 0x72, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x05, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x05, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x05, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x1a, 0x65, 0x0a, 0x04, 0x43, 0x65, 0x6c, 0x6c,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x65, 0x6c, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x65, 0x6c, 0x6c, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69,
	0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x22,
	0x32, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c,
	0x69, 0x6e, 0x6b, 0x32, 0xcb, 0x05, 0x0a, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x47, 0x72, 0x69, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x60, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x25, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x67, 0x72, 0x69, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x67, 0x72, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2a, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x67, 0x72, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x67,
	0x72, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x54, 0x61, 0x62, 0x73, 0x12, 0x29, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x67, 0x72, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x54, 0x61, 0x62, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x67, 0x72,
	0x69, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x54, 0x61, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x44, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x24, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x67, 0x72, 0x69, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x67, 0x72, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x29, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x67, 0x72, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x67, 0x72, 0x69, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x5a, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x23, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x67, 0x72, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x67, 0x72, 0x69,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51,
	0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x20, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x67, 0x72, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x67, 0x72, 0x69, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_data_proto_rawDescOnce sync.Once
	file_data_proto_rawDescData = file_data_proto_rawDesc
)

func file_data_proto_rawDescGZIP() []byte {
	file_data_proto_rawDescOnce.Do(func() {
		file_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_data_proto_rawDescData)
	})
	return file_data_proto_rawDescData
}

var file_data_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_data_proto_goTypes = []interface{}{
	(*ListDashboardRequest)(nil),       // 0: testgrid.api.v1.ListDashboardRequest
	(*ListDashboardResponse)(nil),      // 1: testgrid.api.v1.ListDashboardResponse
	(*ListDashboardGroupRequest)(nil),  // 2: testgrid.api.v1.ListDashboardGroupRequest
	(*ListDashboardGroupResponse)(nil), // 3: testgrid.api.v1.ListDashboardGroupResponse
	(*ListDashboardTabsRequest)(nil),   // 4: testgrid.api.v1.ListDashboardTabsRequest
	(*ListDashboardTabsResponse)(nil),  // 5: testgrid.api.v1.ListDashboardTabsResponse
	(*GetDashboardRequest)(nil),        // 6: testgrid.api.v1.GetDashboardRequest
	(*GetDashboardResponse)(nil),       // 7: testgrid.api.v1.GetDashboardResponse
	(*GetDashboardGroupRequest)(nil),   // 8: testgrid.api.v1.GetDashboardGroupRequest
	(*GetDashboardGroupResponse)(nil),  // 9: testgrid.api.v1.GetDashboardGroupResponse
	(*ListHeadersRequest)(nil),         // 10: testgrid.api.v1.ListHeadersRequest
	(*ListHeadersResponse)(nil),        // 11: testgrid.api.v1.ListHeadersResponse
	(*ListRowsRequest)(nil),            // 12: testgrid.api.v1.ListRowsRequest
	(*ListRowsResponse)(nil),           // 13: testgrid.api.v1.ListRowsResponse
	(*Resource)(nil),                   // 14: testgrid.api.v1.Resource
	(*ListHeadersResponse_Header)(nil), // 15: testgrid.api.v1.ListHeadersResponse.Header
	(*ListRowsResponse_Row)(nil),       // 16: testgrid.api.v1.ListRowsResponse.Row
	(*ListRowsResponse_Cell)(nil),      // 17: testgrid.api.v1.ListRowsResponse.Cell
	(*config.Notification)(nil),        // 18: Notification
	(*timestamp.Timestamp)(nil),        // 19: google.protobuf.Timestamp
	(*state.AlertInfo)(nil),            // 20: AlertInfo
}
var file_data_proto_depIdxs = []int32{
	14, // 0: testgrid.api.v1.ListDashboardResponse.dashboards:type_name -> testgrid.api.v1.Resource
	14, // 1: testgrid.api.v1.ListDashboardGroupResponse.dashboard_groups:type_name -> testgrid.api.v1.Resource
	14, // 2: testgrid.api.v1.ListDashboardTabsResponse.dashboard_tabs:type_name -> testgrid.api.v1.Resource
	18, // 3: testgrid.api.v1.GetDashboardResponse.notifications:type_name -> Notification
	14, // 4: testgrid.api.v1.GetDashboardGroupResponse.dashboards:type_name -> testgrid.api.v1.Resource
	15, // 5: testgrid.api.v1.ListHeadersResponse.headers:type_name -> testgrid.api.v1.ListHeadersResponse.Header
	16, // 6: testgrid.api.v1.ListRowsResponse.rows:type_name -> testgrid.api.v1.ListRowsResponse.Row
	19, // 7: testgrid.api.v1.ListHeadersResponse.Header.started:type_name -> google.protobuf.Timestamp
	17, // 8: testgrid.api.v1.ListRowsResponse.Row.cells:type_name -> testgrid.api.v1.ListRowsResponse.Cell
	20, // 9: testgrid.api.v1.ListRowsResponse.Row.alert:type_name -> AlertInfo
	0,  // 10: testgrid.api.v1.TestGridData.ListDashboard:input_type -> testgrid.api.v1.ListDashboardRequest
	2,  // 11: testgrid.api.v1.TestGridData.ListDashboardGroup:input_type -> testgrid.api.v1.ListDashboardGroupRequest
	4,  // 12: testgrid.api.v1.TestGridData.ListDashboardTabs:input_type -> testgrid.api.v1.ListDashboardTabsRequest
	6,  // 13: testgrid.api.v1.TestGridData.GetDashboard:input_type -> testgrid.api.v1.GetDashboardRequest
	8,  // 14: testgrid.api.v1.TestGridData.GetDashboardGroup:input_type -> testgrid.api.v1.GetDashboardGroupRequest
	10, // 15: testgrid.api.v1.TestGridData.ListHeaders:input_type -> testgrid.api.v1.ListHeadersRequest
	12, // 16: testgrid.api.v1.TestGridData.ListRows:input_type -> testgrid.api.v1.ListRowsRequest
	1,  // 17: testgrid.api.v1.TestGridData.ListDashboard:output_type -> testgrid.api.v1.ListDashboardResponse
	3,  // 18: testgrid.api.v1.TestGridData.ListDashboardGroup:output_type -> testgrid.api.v1.ListDashboardGroupResponse
	5,  // 19: testgrid.api.v1.TestGridData.ListDashboardTabs:output_type -> testgrid.api.v1.ListDashboardTabsResponse
	7,  // 20: testgrid.api.v1.TestGridData.GetDashboard:output_type -> testgrid.api.v1.GetDashboardResponse
	9,  // 21: testgrid.api.v1.TestGridData.GetDashboardGroup:output_type -> testgrid.api.v1.GetDashboardGroupResponse
	11, // 22: testgrid.api.v1.TestGridData.ListHeaders:output_type -> testgrid.api.v1.ListHeadersResponse
	13, // 23: testgrid.api.v1.TestGridData.ListRows:output_type -> testgrid.api.v1.ListRowsResponse
	17, // [17:24] is the sub-list for method output_type
	10, // [10:17] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_data_proto_init() }
func file_data_proto_init() {
	if File_data_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_data_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDashboardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDashboardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDashboardGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDashboardGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDashboardTabsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDashboardTabsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDashboardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDashboardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDashboardGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDashboardGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListHeadersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListHeadersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRowsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRowsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListHeadersResponse_Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRowsResponse_Row); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRowsResponse_Cell); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_data_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_data_proto_goTypes,
		DependencyIndexes: file_data_proto_depIdxs,
		MessageInfos:      file_data_proto_msgTypes,
	}.Build()
	File_data_proto = out.File
	file_data_proto_rawDesc = nil
	file_data_proto_goTypes = nil
	file_data_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TestGridDataClient is the client API for TestGridData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TestGridDataClient interface {
	// GET /dashboards
	// Lists dashboard names
	ListDashboard(ctx context.Context, in *ListDashboardRequest, opts ...grpc.CallOption) (*ListDashboardResponse, error)
	// GET /dashboard-groups
	// Lists the dashboard group names
	ListDashboardGroup(ctx context.Context, in *ListDashboardGroupRequest, opts ...grpc.CallOption) (*ListDashboardGroupResponse, error)
	// GET /dashboards/{dashboard}/tabs
	// Lists the dashboard tab names
	ListDashboardTabs(ctx context.Context, in *ListDashboardTabsRequest, opts ...grpc.CallOption) (*ListDashboardTabsResponse, error)
	// GET /dashboards/{dashboard}
	// Returns a Dashboard config's metadata
	// Excludes subtabs, accessed through the /tabs list method instead
	GetDashboard(ctx context.Context, in *GetDashboardRequest, opts ...grpc.CallOption) (*GetDashboardResponse, error)
	// GET /dashboard-groups/{dashboard-group}
	// Lists the dashboard names in that group
	GetDashboardGroup(ctx context.Context, in *GetDashboardGroupRequest, opts ...grpc.CallOption) (*GetDashboardGroupResponse, error)
	// GET /dashboards/{dashboard}/tabs/{tab}/headers
	// Returns the headers for grid results
	ListHeaders(ctx context.Context, in *ListHeadersRequest, opts ...grpc.CallOption) (*ListHeadersResponse, error)
	// GET /dashboards/{dashboard}/tabs/{tab}/rows
	// Returns information on grid rows, and data within those rows
	ListRows(ctx context.Context, in *ListRowsRequest, opts ...grpc.CallOption) (*ListRowsResponse, error)
}

type testGridDataClient struct {
	cc grpc.ClientConnInterface
}

func NewTestGridDataClient(cc grpc.ClientConnInterface) TestGridDataClient {
	return &testGridDataClient{cc}
}

func (c *testGridDataClient) ListDashboard(ctx context.Context, in *ListDashboardRequest, opts ...grpc.CallOption) (*ListDashboardResponse, error) {
	out := new(ListDashboardResponse)
	err := c.cc.Invoke(ctx, "/testgrid.api.v1.TestGridData/ListDashboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testGridDataClient) ListDashboardGroup(ctx context.Context, in *ListDashboardGroupRequest, opts ...grpc.CallOption) (*ListDashboardGroupResponse, error) {
	out := new(ListDashboardGroupResponse)
	err := c.cc.Invoke(ctx, "/testgrid.api.v1.TestGridData/ListDashboardGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testGridDataClient) ListDashboardTabs(ctx context.Context, in *ListDashboardTabsRequest, opts ...grpc.CallOption) (*ListDashboardTabsResponse, error) {
	out := new(ListDashboardTabsResponse)
	err := c.cc.Invoke(ctx, "/testgrid.api.v1.TestGridData/ListDashboardTabs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testGridDataClient) GetDashboard(ctx context.Context, in *GetDashboardRequest, opts ...grpc.CallOption) (*GetDashboardResponse, error) {
	out := new(GetDashboardResponse)
	err := c.cc.Invoke(ctx, "/testgrid.api.v1.TestGridData/GetDashboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testGridDataClient) GetDashboardGroup(ctx context.Context, in *GetDashboardGroupRequest, opts ...grpc.CallOption) (*GetDashboardGroupResponse, error) {
	out := new(GetDashboardGroupResponse)
	err := c.cc.Invoke(ctx, "/testgrid.api.v1.TestGridData/GetDashboardGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testGridDataClient) ListHeaders(ctx context.Context, in *ListHeadersRequest, opts ...grpc.CallOption) (*ListHeadersResponse, error) {
	out := new(ListHeadersResponse)
	err := c.cc.Invoke(ctx, "/testgrid.api.v1.TestGridData/ListHeaders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testGridDataClient) ListRows(ctx context.Context, in *ListRowsRequest, opts ...grpc.CallOption) (*ListRowsResponse, error) {
	out := new(ListRowsResponse)
	err := c.cc.Invoke(ctx, "/testgrid.api.v1.TestGridData/ListRows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestGridDataServer is the server API for TestGridData service.
type TestGridDataServer interface {
	// GET /dashboards
	// Lists dashboard names
	ListDashboard(context.Context, *ListDashboardRequest) (*ListDashboardResponse, error)
	// GET /dashboard-groups
	// Lists the dashboard group names
	ListDashboardGroup(context.Context, *ListDashboardGroupRequest) (*ListDashboardGroupResponse, error)
	// GET /dashboards/{dashboard}/tabs
	// Lists the dashboard tab names
	ListDashboardTabs(context.Context, *ListDashboardTabsRequest) (*ListDashboardTabsResponse, error)
	// GET /dashboards/{dashboard}
	// Returns a Dashboard config's metadata
	// Excludes subtabs, accessed through the /tabs list method instead
	GetDashboard(context.Context, *GetDashboardRequest) (*GetDashboardResponse, error)
	// GET /dashboard-groups/{dashboard-group}
	// Lists the dashboard names in that group
	GetDashboardGroup(context.Context, *GetDashboardGroupRequest) (*GetDashboardGroupResponse, error)
	// GET /dashboards/{dashboard}/tabs/{tab}/headers
	// Returns the headers for grid results
	ListHeaders(context.Context, *ListHeadersRequest) (*ListHeadersResponse, error)
	// GET /dashboards/{dashboard}/tabs/{tab}/rows
	// Returns information on grid rows, and data within those rows
	ListRows(context.Context, *ListRowsRequest) (*ListRowsResponse, error)
}

// UnimplementedTestGridDataServer can be embedded to have forward compatible implementations.
type UnimplementedTestGridDataServer struct {
}

func (*UnimplementedTestGridDataServer) ListDashboard(context.Context, *ListDashboardRequest) (*ListDashboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDashboard not implemented")
}
func (*UnimplementedTestGridDataServer) ListDashboardGroup(context.Context, *ListDashboardGroupRequest) (*ListDashboardGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDashboardGroup not implemented")
}
func (*UnimplementedTestGridDataServer) ListDashboardTabs(context.Context, *ListDashboardTabsRequest) (*ListDashboardTabsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDashboardTabs not implemented")
}
func (*UnimplementedTestGridDataServer) GetDashboard(context.Context, *GetDashboardRequest) (*GetDashboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDashboard not implemented")
}
func (*UnimplementedTestGridDataServer) GetDashboardGroup(context.Context, *GetDashboardGroupRequest) (*GetDashboardGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDashboardGroup not implemented")
}
func (*UnimplementedTestGridDataServer) ListHeaders(context.Context, *ListHeadersRequest) (*ListHeadersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHeaders not implemented")
}
func (*UnimplementedTestGridDataServer) ListRows(context.Context, *ListRowsRequest) (*ListRowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRows not implemented")
}

func RegisterTestGridDataServer(s *grpc.Server, srv TestGridDataServer) {
	s.RegisterService(&_TestGridData_serviceDesc, srv)
}

func _TestGridData_ListDashboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestGridDataServer).ListDashboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testgrid.api.v1.TestGridData/ListDashboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestGridDataServer).ListDashboard(ctx, req.(*ListDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestGridData_ListDashboardGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDashboardGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestGridDataServer).ListDashboardGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testgrid.api.v1.TestGridData/ListDashboardGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestGridDataServer).ListDashboardGroup(ctx, req.(*ListDashboardGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestGridData_ListDashboardTabs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDashboardTabsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestGridDataServer).ListDashboardTabs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testgrid.api.v1.TestGridData/ListDashboardTabs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestGridDataServer).ListDashboardTabs(ctx, req.(*ListDashboardTabsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestGridData_GetDashboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestGridDataServer).GetDashboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testgrid.api.v1.TestGridData/GetDashboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestGridDataServer).GetDashboard(ctx, req.(*GetDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestGridData_GetDashboardGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDashboardGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestGridDataServer).GetDashboardGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testgrid.api.v1.TestGridData/GetDashboardGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestGridDataServer).GetDashboardGroup(ctx, req.(*GetDashboardGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestGridData_ListHeaders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHeadersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestGridDataServer).ListHeaders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testgrid.api.v1.TestGridData/ListHeaders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestGridDataServer).ListHeaders(ctx, req.(*ListHeadersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestGridData_ListRows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestGridDataServer).ListRows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testgrid.api.v1.TestGridData/ListRows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestGridDataServer).ListRows(ctx, req.(*ListRowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TestGridData_serviceDesc = grpc.ServiceDesc{
	ServiceName: "testgrid.api.v1.TestGridData",
	HandlerType: (*TestGridDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDashboard",
			Handler:    _TestGridData_ListDashboard_Handler,
		},
		{
			MethodName: "ListDashboardGroup",
			Handler:    _TestGridData_ListDashboardGroup_Handler,
		},
		{
			MethodName: "ListDashboardTabs",
			Handler:    _TestGridData_ListDashboardTabs_Handler,
		},
		{
			MethodName: "GetDashboard",
			Handler:    _TestGridData_GetDashboard_Handler,
		},
		{
			MethodName: "GetDashboardGroup",
			Handler:    _TestGridData_GetDashboardGroup_Handler,
		},
		{
			MethodName: "ListHeaders",
			Handler:    _TestGridData_ListHeaders_Handler,
		},
		{
			MethodName: "ListRows",
			Handler:    _TestGridData_ListRows_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "data.proto",
}
