// @generated by protobuf-ts 2.8.2 with parameter long_type_string
// @generated from protobuf file "pb/api/v1/data.proto" (package "testgrid.api.v1", syntax proto3)
// tslint:disable
import { ServiceType } from '@protobuf-ts/runtime-rpc';
import type { BinaryWriteOptions } from '@protobuf-ts/runtime';
import type { IBinaryWriter } from '@protobuf-ts/runtime';
import { WireType } from '@protobuf-ts/runtime';
import type { BinaryReadOptions } from '@protobuf-ts/runtime';
import type { IBinaryReader } from '@protobuf-ts/runtime';
import { UnknownFieldHandler } from '@protobuf-ts/runtime';
import type { PartialMessage } from '@protobuf-ts/runtime';
import { reflectionMergePartial } from '@protobuf-ts/runtime';
import { MESSAGE_TYPE } from '@protobuf-ts/runtime';
import { MessageType } from '@protobuf-ts/runtime';
import { TestInfo_Trend } from '../../summary/summary';
import { AlertInfo } from '../../state/state';
import { Timestamp } from '../../../google/protobuf/timestamp';
import { Notification } from '../../config/config';
/**
 * @generated from protobuf message testgrid.api.v1.ListDashboardRequest
 */
export interface ListDashboardRequest {
  /**
   * @generated from protobuf field: string scope = 1;
   */
  scope: string;
}
/**
 * @generated from protobuf message testgrid.api.v1.ListDashboardResponse
 */
export interface ListDashboardResponse {
  /**
   * @generated from protobuf field: repeated testgrid.api.v1.Resource dashboards = 1;
   */
  dashboards: Resource[];
}
/**
 * @generated from protobuf message testgrid.api.v1.ListDashboardGroupRequest
 */
export interface ListDashboardGroupRequest {
  /**
   * @generated from protobuf field: string scope = 1;
   */
  scope: string;
}
/**
 * @generated from protobuf message testgrid.api.v1.ListDashboardGroupResponse
 */
export interface ListDashboardGroupResponse {
  /**
   * @generated from protobuf field: repeated testgrid.api.v1.Resource dashboard_groups = 1;
   */
  dashboardGroups: Resource[];
}
/**
 * @generated from protobuf message testgrid.api.v1.ListDashboardTabsRequest
 */
export interface ListDashboardTabsRequest {
  /**
   * @generated from protobuf field: string scope = 1;
   */
  scope: string;
  /**
   * @generated from protobuf field: string dashboard = 2;
   */
  dashboard: string;
}
/**
 * @generated from protobuf message testgrid.api.v1.ListDashboardTabsResponse
 */
export interface ListDashboardTabsResponse {
  /**
   * @generated from protobuf field: repeated testgrid.api.v1.Resource dashboard_tabs = 1;
   */
  dashboardTabs: Resource[];
}
/**
 * @generated from protobuf message testgrid.api.v1.GetDashboardRequest
 */
export interface GetDashboardRequest {
  /**
   * @generated from protobuf field: string scope = 1;
   */
  scope: string;
  /**
   * @generated from protobuf field: string dashboard = 2;
   */
  dashboard: string;
}
/**
 * @generated from protobuf message testgrid.api.v1.GetDashboardResponse
 */
export interface GetDashboardResponse {
  /**
   * A list of notifications attached to this dashboard.
   * This is displayed on any dashboard tab in this dashboard.
   *
   * @generated from protobuf field: repeated testgrid.config.Notification notifications = 1;
   */
  notifications: Notification[];
  /**
   * Control which tab is displayed when first opening a dashboard.
   * Defaults to Summary
   *
   * @generated from protobuf field: string default_tab = 2;
   */
  defaultTab: string;
  /**
   * Controls whether to suppress highlighting of failing tabs.
   *
   * @generated from protobuf field: bool suppress_failing_tabs = 3;
   */
  suppressFailingTabs: boolean;
  /**
   * Controls whether to apply special highlighting to result header columns for
   * the current day.
   *
   * @generated from protobuf field: bool highlight_today = 4;
   */
  highlightToday: boolean;
}
/**
 * @generated from protobuf message testgrid.api.v1.GetDashboardGroupRequest
 */
export interface GetDashboardGroupRequest {
  /**
   * @generated from protobuf field: string scope = 1;
   */
  scope: string;
  /**
   * @generated from protobuf field: string dashboard_group = 2;
   */
  dashboardGroup: string;
}
/**
 * @generated from protobuf message testgrid.api.v1.GetDashboardGroupResponse
 */
export interface GetDashboardGroupResponse {
  /**
   * @generated from protobuf field: repeated testgrid.api.v1.Resource dashboards = 1;
   */
  dashboards: Resource[];
}
/**
 * @generated from protobuf message testgrid.api.v1.ListHeadersRequest
 */
export interface ListHeadersRequest {
  /**
   * @generated from protobuf field: string scope = 1;
   */
  scope: string;
  /**
   * @generated from protobuf field: string dashboard = 2;
   */
  dashboard: string;
  /**
   * @generated from protobuf field: string tab = 3;
   */
  tab: string;
}
/**
 * @generated from protobuf message testgrid.api.v1.ListHeadersResponse
 */
export interface ListHeadersResponse {
  /**
   * @generated from protobuf field: repeated testgrid.api.v1.ListHeadersResponse.Header headers = 1;
   */
  headers: ListHeadersResponse_Header[];
}
/**
 * @generated from protobuf message testgrid.api.v1.ListHeadersResponse.Header
 */
export interface ListHeadersResponse_Header {
  /**
   * Unique instance of the job, typically BUILD_NUMBER from prow or a guid
   *
   * @generated from protobuf field: string build = 1;
   */
  build: string;
  /**
   * Name associated with the column (such as the run/invocation ID). No two
   * columns should have the same build_id and name. The name field allows the
   * display of multiple columns with the same build_id.
   *
   * @generated from protobuf field: string name = 2;
   */
  name: string;
  /**
   * When the build started running
   *
   * @generated from protobuf field: google.protobuf.Timestamp started = 3;
   */
  started?: Timestamp;
  /**
   * Additional custom headers like commit, image used, etc.
   *
   * @generated from protobuf field: repeated string extra = 4;
   */
  extra: string[];
  /**
   * Custom hotlist ids.
   *
   * @generated from protobuf field: string hotlist_ids = 5;
   */
  hotlistIds: string;
}
/**
 * @generated from protobuf message testgrid.api.v1.ListRowsRequest
 */
export interface ListRowsRequest {
  /**
   * @generated from protobuf field: string scope = 1;
   */
  scope: string;
  /**
   * @generated from protobuf field: string dashboard = 2;
   */
  dashboard: string;
  /**
   * @generated from protobuf field: string tab = 3;
   */
  tab: string;
}
/**
 * @generated from protobuf message testgrid.api.v1.ListRowsResponse
 */
export interface ListRowsResponse {
  /**
   * @generated from protobuf field: repeated testgrid.api.v1.ListRowsResponse.Row rows = 1;
   */
  rows: ListRowsResponse_Row[];
}
/**
 * @generated from protobuf message testgrid.api.v1.ListRowsResponse.Row
 */
export interface ListRowsResponse_Row {
  /**
   * Display name of the test case
   *
   * @generated from protobuf field: string name = 1;
   */
  name: string;
  /**
   * Historical results of the test case. Unencoded.
   *
   * @generated from protobuf field: repeated testgrid.api.v1.ListRowsResponse.Cell cells = 2;
   */
  cells: ListRowsResponse_Cell[];
  /**
   * Issue or Bug IDs associated with the test case
   *
   * @generated from protobuf field: repeated string issues = 3;
   */
  issues: string[];
  /**
   * Alert associated with the test case
   *
   * @generated from protobuf field: testgrid.state.AlertInfo alert = 4;
   */
  alert?: AlertInfo;
}
/**
 * @generated from protobuf message testgrid.api.v1.ListRowsResponse.Cell
 */
export interface ListRowsResponse_Cell {
  /**
   * @generated from protobuf field: int32 result = 1;
   */
  result: number;
  /**
   * @generated from protobuf field: string cell_id = 2;
   */
  cellId: string;
  /**
   * @generated from protobuf field: string message = 3;
   */
  message: string;
  /**
   * @generated from protobuf field: string icon = 4;
   */
  icon: string;
}
/**
 * A Resource is a REST resource, often returned by a LIST command
 * It includes the name of the resource and a link to the resource
 *
 * @generated from protobuf message testgrid.api.v1.Resource
 */
export interface Resource {
  /**
   * @generated from protobuf field: string name = 1;
   */
  name: string;
  /**
   * @generated from protobuf field: string link = 2;
   */
  link: string;
}
/**
 * @generated from protobuf message testgrid.api.v1.ListTabSummariesRequest
 */
export interface ListTabSummariesRequest {
  /**
   * Scope defines the GCS bucket to read the results from.
   *
   * @generated from protobuf field: string scope = 1;
   */
  scope: string;
  /**
   * Name of the dashboard to fetch tab summaries for.
   *
   * @generated from protobuf field: string dashboard = 2;
   */
  dashboard: string;
}
/**
 * @generated from protobuf message testgrid.api.v1.ListTabSummariesResponse
 */
export interface ListTabSummariesResponse {
  /**
   * List of tab summaries.
   *
   * @generated from protobuf field: repeated testgrid.api.v1.TabSummary tab_summaries = 1;
   */
  tabSummaries: TabSummary[];
}
/**
 * @generated from protobuf message testgrid.api.v1.GetTabSummaryRequest
 */
export interface GetTabSummaryRequest {
  /**
   * Scope defines the GCS bucket to read the results from.
   *
   * @generated from protobuf field: string scope = 1;
   */
  scope: string;
  /**
   * Name of the dashboard to fetch tab summaries for.
   *
   * @generated from protobuf field: string dashboard = 2;
   */
  dashboard: string;
  /**
   * Name of the particular tab to fetch the summary for.
   *
   * @generated from protobuf field: string tab = 3;
   */
  tab: string;
}
/**
 * @generated from protobuf message testgrid.api.v1.GetTabSummaryResponse
 */
export interface GetTabSummaryResponse {
  /**
   * Summary for the tab
   *
   * @generated from protobuf field: testgrid.api.v1.TabSummary tab_summary = 1;
   */
  tabSummary?: TabSummary;
}
/**
 * @generated from protobuf message testgrid.api.v1.ListDashboardSummariesRequest
 */
export interface ListDashboardSummariesRequest {
  /**
   * Scope defines the GCS bucket to read the results from.
   *
   * @generated from protobuf field: string scope = 1;
   */
  scope: string;
  /**
   * Name of the dashboard group to fetch dashboard summaries for.
   *
   * @generated from protobuf field: string dashboard_group = 2;
   */
  dashboardGroup: string;
}
/**
 * @generated from protobuf message testgrid.api.v1.ListDashboardSummariesResponse
 */
export interface ListDashboardSummariesResponse {
  /**
   * List of dashboard summaries.
   *
   * @generated from protobuf field: repeated testgrid.api.v1.DashboardSummary dashboard_summaries = 1;
   */
  dashboardSummaries: DashboardSummary[];
}
/**
 * @generated from protobuf message testgrid.api.v1.GetDashboardSummaryRequest
 */
export interface GetDashboardSummaryRequest {
  /**
   * Scope defines the GCS bucket to read the results from.
   *
   * @generated from protobuf field: string scope = 1;
   */
  scope: string;
  /**
   * Name of the dashboard to fetch the summary for.
   *
   * @generated from protobuf field: string dashboard = 2;
   */
  dashboard: string;
}
/**
 * @generated from protobuf message testgrid.api.v1.GetDashboardSummaryResponse
 */
export interface GetDashboardSummaryResponse {
  /**
   * Summary for the dashboard.
   *
   * @generated from protobuf field: testgrid.api.v1.DashboardSummary dashboard_summary = 1;
   */
  dashboardSummary?: DashboardSummary;
}
/**
 * Summary for a particular tab.
 * Contains the info required to render tab summary in UI.
 *
 * @generated from protobuf message testgrid.api.v1.TabSummary
 */
export interface TabSummary {
  /**
   * The name of the dashboard this tab belongs to.
   *
   * @generated from protobuf field: string dashboard_name = 1;
   */
  dashboardName: string;
  /**
   * The name of the tab.
   *
   * @generated from protobuf field: string tab_name = 2;
   */
  tabName: string;
  /**
   * Overall status for the dashboard tab (e.g. PASSING, FAILING, etc.)
   *
   * @generated from protobuf field: string overall_status = 3;
   */
  overallStatus: string;
  /**
   * Summary of the status for this dashboard tab.
   *
   * @generated from protobuf field: string detailed_status_message = 4;
   */
  detailedStatusMessage: string;
  /**
   * Timestamp at which tests last ran.
   *
   * @generated from protobuf field: google.protobuf.Timestamp last_run_timestamp = 5;
   */
  lastRunTimestamp?: Timestamp;
  /**
   * Timestamp at which the test group was last updated.
   *
   * @generated from protobuf field: google.protobuf.Timestamp last_update_timestamp = 6;
   */
  lastUpdateTimestamp?: Timestamp;
  /**
   * The ID for the latest passing build.
   *
   * @generated from protobuf field: string latest_passing_build = 7;
   */
  latestPassingBuild: string;
  /**
   * Summarized info on the failing tests.
   * In this case, any test which raised an alert and did not suppress it is considered failing.
   *
   * @generated from protobuf field: testgrid.api.v1.FailuresSummary failures_summary = 8;
   */
  failuresSummary?: FailuresSummary;
  /**
   * Summarized info on the tab's healthiness.
   *
   * @generated from protobuf field: testgrid.api.v1.HealthinessSummary healthiness_summary = 9;
   */
  healthinessSummary?: HealthinessSummary;
}
/**
 * Summarized representation of data from failing test summaries.
 * Will be rendered in failures summary component within tab summary.
 *
 * @generated from protobuf message testgrid.api.v1.FailuresSummary
 */
export interface FailuresSummary {
  /**
   * Top failing tests by fail count.
   *
   * @generated from protobuf field: repeated testgrid.api.v1.FailingTestInfo top_failing_tests = 1;
   */
  topFailingTests: FailingTestInfo[];
  /**
   * Aggregated stats across all failing tests.
   *
   * @generated from protobuf field: testgrid.api.v1.FailureStats failure_stats = 2;
   */
  failureStats?: FailureStats;
}
/**
 * Subset of data from FailingTestSummary defined in summary.proto.
 *
 * @generated from protobuf message testgrid.api.v1.FailingTestInfo
 */
export interface FailingTestInfo {
  /**
   * Name of the failing test.
   *
   * @generated from protobuf field: string display_name = 1;
   */
  displayName: string;
  /**
   * number of times the test has failed.
   *
   * @generated from protobuf field: int32 fail_count = 2;
   */
  failCount: number;
  /**
   * Timestamp for the last cycle in which the test passed.
   *
   * @generated from protobuf field: google.protobuf.Timestamp pass_timestamp = 3;
   */
  passTimestamp?: Timestamp;
  /**
   * Timestamp for the first cycle in which the test failed.
   *
   * @generated from protobuf field: google.protobuf.Timestamp fail_timestamp = 4;
   */
  failTimestamp?: Timestamp;
}
/**
 * Aggregate stats across all failing tests.
 *
 * @generated from protobuf message testgrid.api.v1.FailureStats
 */
export interface FailureStats {
  /**
   * Number of failing tests for the tab.
   *
   * @generated from protobuf field: int32 num_failing_tests = 1;
   */
  numFailingTests: number;
}
/**
 * Summarized representation of data from tab's HealthinessInfo.
 * Will be rendered in healthiness summary component within tab summary.
 *
 * @generated from protobuf message testgrid.api.v1.HealthinessSummary
 */
export interface HealthinessSummary {
  /**
   * Top flaky tests (with flakiness > 0) by the current flakiness %.
   *
   * @generated from protobuf field: repeated testgrid.api.v1.FlakyTestInfo top_flaky_tests = 1;
   */
  topFlakyTests: FlakyTestInfo[];
  /**
   * Aggregated healthiness stats for the tab.
   *
   * @generated from protobuf field: testgrid.api.v1.HealthinessStats healthiness_stats = 2;
   */
  healthinessStats?: HealthinessStats;
}
/**
 * Subset of data from HealthinessInfo.TestInfo defined in summary.proto.
 *
 * @generated from protobuf message testgrid.api.v1.FlakyTestInfo
 */
export interface FlakyTestInfo {
  /**
   * Name of the flaky test.
   *
   * @generated from protobuf field: string display_name = 1;
   */
  displayName: string;
  /**
   * The flakiness of the test, in % measured out of 100
   *
   * @generated from protobuf field: float flakiness = 2;
   */
  flakiness: number;
  /**
   * The change of flakiness based on the last interval's flakiness
   * The interval is set by each tab's config, with a default of 7 days.
   *
   * @generated from protobuf field: testgrid.summary.TestInfo.Trend change = 3;
   */
  change: TestInfo_Trend;
}
/**
 * Aggregated healthiness stats across the tab.
 *
 * @generated from protobuf message testgrid.api.v1.HealthinessStats
 */
export interface HealthinessStats {
  /**
   * The start of the time frame that the analysis was run for.
   *
   * @generated from protobuf field: google.protobuf.Timestamp start = 1;
   */
  start?: Timestamp;
  /**
   * The end of the time frame that the analysis was run for.
   *
   * @generated from protobuf field: google.protobuf.Timestamp end = 2;
   */
  end?: Timestamp;
  /**
   * Number of flaky tests in the tab.
   *
   * @generated from protobuf field: int32 num_flaky_tests = 3;
   */
  numFlakyTests: number;
  /**
   * Average flakiness for the current analysis interval.
   *
   * @generated from protobuf field: float average_flakiness = 4;
   */
  averageFlakiness: number;
  /**
   * Average flakiness for the previous analysis interval.
   *
   * @generated from protobuf field: float previous_flakiness = 5;
   */
  previousFlakiness: number;
}
/**
 * Summary for a particular dashboard.
 * Contains the info required to render dashboard summary in UI (done in the dashboard group view).
 *
 * @generated from protobuf message testgrid.api.v1.DashboardSummary
 */
export interface DashboardSummary {
  /**
   * Name of the dashboard.
   *
   * @generated from protobuf field: string name = 1;
   */
  name: string;
  /**
   * Overall status of the dashboard.
   * Will be calculated based on the presence and importance of underlying tabs.
   *
   * @generated from protobuf field: string overall_status = 2;
   */
  overallStatus: string;
  /**
   * Count of the tabs by status.
   *
   * @generated from protobuf field: map<string, int32> tab_status_count = 3;
   */
  tabStatusCount: {
    [key: string]: number;
  };
}
// @generated message type with reflection information, may provide speed optimized methods
class ListDashboardRequest$Type extends MessageType<ListDashboardRequest> {
  constructor() {
    super('testgrid.api.v1.ListDashboardRequest', [
      { no: 1, name: 'scope', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
    ]);
  }
  create(value?: PartialMessage<ListDashboardRequest>): ListDashboardRequest {
    const message = { scope: '' };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<ListDashboardRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ListDashboardRequest
  ): ListDashboardRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string scope */ 1:
          message.scope = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: ListDashboardRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* string scope = 1; */
    if (message.scope !== '')
      writer.tag(1, WireType.LengthDelimited).string(message.scope);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message testgrid.api.v1.ListDashboardRequest
 */
export const ListDashboardRequest = new ListDashboardRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListDashboardResponse$Type extends MessageType<ListDashboardResponse> {
  constructor() {
    super('testgrid.api.v1.ListDashboardResponse', [
      {
        no: 1,
        name: 'dashboards',
        kind: 'message',
        repeat: 1 /*RepeatType.PACKED*/,
        T: () => Resource,
      },
    ]);
  }
  create(value?: PartialMessage<ListDashboardResponse>): ListDashboardResponse {
    const message = { dashboards: [] };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<ListDashboardResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ListDashboardResponse
  ): ListDashboardResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* repeated testgrid.api.v1.Resource dashboards */ 1:
          message.dashboards.push(
            Resource.internalBinaryRead(reader, reader.uint32(), options)
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: ListDashboardResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* repeated testgrid.api.v1.Resource dashboards = 1; */
    for (let i = 0; i < message.dashboards.length; i++)
      Resource.internalBinaryWrite(
        message.dashboards[i],
        writer.tag(1, WireType.LengthDelimited).fork(),
        options
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message testgrid.api.v1.ListDashboardResponse
 */
export const ListDashboardResponse = new ListDashboardResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListDashboardGroupRequest$Type extends MessageType<ListDashboardGroupRequest> {
  constructor() {
    super('testgrid.api.v1.ListDashboardGroupRequest', [
      { no: 1, name: 'scope', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
    ]);
  }
  create(
    value?: PartialMessage<ListDashboardGroupRequest>
  ): ListDashboardGroupRequest {
    const message = { scope: '' };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<ListDashboardGroupRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ListDashboardGroupRequest
  ): ListDashboardGroupRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string scope */ 1:
          message.scope = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: ListDashboardGroupRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* string scope = 1; */
    if (message.scope !== '')
      writer.tag(1, WireType.LengthDelimited).string(message.scope);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message testgrid.api.v1.ListDashboardGroupRequest
 */
export const ListDashboardGroupRequest = new ListDashboardGroupRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListDashboardGroupResponse$Type extends MessageType<ListDashboardGroupResponse> {
  constructor() {
    super('testgrid.api.v1.ListDashboardGroupResponse', [
      {
        no: 1,
        name: 'dashboard_groups',
        kind: 'message',
        repeat: 1 /*RepeatType.PACKED*/,
        T: () => Resource,
      },
    ]);
  }
  create(
    value?: PartialMessage<ListDashboardGroupResponse>
  ): ListDashboardGroupResponse {
    const message = { dashboardGroups: [] };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<ListDashboardGroupResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ListDashboardGroupResponse
  ): ListDashboardGroupResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* repeated testgrid.api.v1.Resource dashboard_groups */ 1:
          message.dashboardGroups.push(
            Resource.internalBinaryRead(reader, reader.uint32(), options)
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: ListDashboardGroupResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* repeated testgrid.api.v1.Resource dashboard_groups = 1; */
    for (let i = 0; i < message.dashboardGroups.length; i++)
      Resource.internalBinaryWrite(
        message.dashboardGroups[i],
        writer.tag(1, WireType.LengthDelimited).fork(),
        options
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message testgrid.api.v1.ListDashboardGroupResponse
 */
export const ListDashboardGroupResponse = new ListDashboardGroupResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListDashboardTabsRequest$Type extends MessageType<ListDashboardTabsRequest> {
  constructor() {
    super('testgrid.api.v1.ListDashboardTabsRequest', [
      { no: 1, name: 'scope', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: 'dashboard', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
    ]);
  }
  create(
    value?: PartialMessage<ListDashboardTabsRequest>
  ): ListDashboardTabsRequest {
    const message = { scope: '', dashboard: '' };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<ListDashboardTabsRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ListDashboardTabsRequest
  ): ListDashboardTabsRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string scope */ 1:
          message.scope = reader.string();
          break;
        case /* string dashboard */ 2:
          message.dashboard = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: ListDashboardTabsRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* string scope = 1; */
    if (message.scope !== '')
      writer.tag(1, WireType.LengthDelimited).string(message.scope);
    /* string dashboard = 2; */
    if (message.dashboard !== '')
      writer.tag(2, WireType.LengthDelimited).string(message.dashboard);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message testgrid.api.v1.ListDashboardTabsRequest
 */
export const ListDashboardTabsRequest = new ListDashboardTabsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListDashboardTabsResponse$Type extends MessageType<ListDashboardTabsResponse> {
  constructor() {
    super('testgrid.api.v1.ListDashboardTabsResponse', [
      {
        no: 1,
        name: 'dashboard_tabs',
        kind: 'message',
        repeat: 1 /*RepeatType.PACKED*/,
        T: () => Resource,
      },
    ]);
  }
  create(
    value?: PartialMessage<ListDashboardTabsResponse>
  ): ListDashboardTabsResponse {
    const message = { dashboardTabs: [] };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<ListDashboardTabsResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ListDashboardTabsResponse
  ): ListDashboardTabsResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* repeated testgrid.api.v1.Resource dashboard_tabs */ 1:
          message.dashboardTabs.push(
            Resource.internalBinaryRead(reader, reader.uint32(), options)
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: ListDashboardTabsResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* repeated testgrid.api.v1.Resource dashboard_tabs = 1; */
    for (let i = 0; i < message.dashboardTabs.length; i++)
      Resource.internalBinaryWrite(
        message.dashboardTabs[i],
        writer.tag(1, WireType.LengthDelimited).fork(),
        options
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message testgrid.api.v1.ListDashboardTabsResponse
 */
export const ListDashboardTabsResponse = new ListDashboardTabsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetDashboardRequest$Type extends MessageType<GetDashboardRequest> {
  constructor() {
    super('testgrid.api.v1.GetDashboardRequest', [
      { no: 1, name: 'scope', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: 'dashboard', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
    ]);
  }
  create(value?: PartialMessage<GetDashboardRequest>): GetDashboardRequest {
    const message = { scope: '', dashboard: '' };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<GetDashboardRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: GetDashboardRequest
  ): GetDashboardRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string scope */ 1:
          message.scope = reader.string();
          break;
        case /* string dashboard */ 2:
          message.dashboard = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: GetDashboardRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* string scope = 1; */
    if (message.scope !== '')
      writer.tag(1, WireType.LengthDelimited).string(message.scope);
    /* string dashboard = 2; */
    if (message.dashboard !== '')
      writer.tag(2, WireType.LengthDelimited).string(message.dashboard);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message testgrid.api.v1.GetDashboardRequest
 */
export const GetDashboardRequest = new GetDashboardRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetDashboardResponse$Type extends MessageType<GetDashboardResponse> {
  constructor() {
    super('testgrid.api.v1.GetDashboardResponse', [
      {
        no: 1,
        name: 'notifications',
        kind: 'message',
        repeat: 1 /*RepeatType.PACKED*/,
        T: () => Notification,
      },
      {
        no: 2,
        name: 'default_tab',
        kind: 'scalar',
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 3,
        name: 'suppress_failing_tabs',
        kind: 'scalar',
        T: 8 /*ScalarType.BOOL*/,
      },
      {
        no: 4,
        name: 'highlight_today',
        kind: 'scalar',
        T: 8 /*ScalarType.BOOL*/,
      },
    ]);
  }
  create(value?: PartialMessage<GetDashboardResponse>): GetDashboardResponse {
    const message = {
      notifications: [],
      defaultTab: '',
      suppressFailingTabs: false,
      highlightToday: false,
    };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<GetDashboardResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: GetDashboardResponse
  ): GetDashboardResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* repeated testgrid.config.Notification notifications */ 1:
          message.notifications.push(
            Notification.internalBinaryRead(reader, reader.uint32(), options)
          );
          break;
        case /* string default_tab */ 2:
          message.defaultTab = reader.string();
          break;
        case /* bool suppress_failing_tabs */ 3:
          message.suppressFailingTabs = reader.bool();
          break;
        case /* bool highlight_today */ 4:
          message.highlightToday = reader.bool();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: GetDashboardResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* repeated testgrid.config.Notification notifications = 1; */
    for (let i = 0; i < message.notifications.length; i++)
      Notification.internalBinaryWrite(
        message.notifications[i],
        writer.tag(1, WireType.LengthDelimited).fork(),
        options
      ).join();
    /* string default_tab = 2; */
    if (message.defaultTab !== '')
      writer.tag(2, WireType.LengthDelimited).string(message.defaultTab);
    /* bool suppress_failing_tabs = 3; */
    if (message.suppressFailingTabs !== false)
      writer.tag(3, WireType.Varint).bool(message.suppressFailingTabs);
    /* bool highlight_today = 4; */
    if (message.highlightToday !== false)
      writer.tag(4, WireType.Varint).bool(message.highlightToday);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message testgrid.api.v1.GetDashboardResponse
 */
export const GetDashboardResponse = new GetDashboardResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetDashboardGroupRequest$Type extends MessageType<GetDashboardGroupRequest> {
  constructor() {
    super('testgrid.api.v1.GetDashboardGroupRequest', [
      { no: 1, name: 'scope', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      {
        no: 2,
        name: 'dashboard_group',
        kind: 'scalar',
        T: 9 /*ScalarType.STRING*/,
      },
    ]);
  }
  create(
    value?: PartialMessage<GetDashboardGroupRequest>
  ): GetDashboardGroupRequest {
    const message = { scope: '', dashboardGroup: '' };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<GetDashboardGroupRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: GetDashboardGroupRequest
  ): GetDashboardGroupRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string scope */ 1:
          message.scope = reader.string();
          break;
        case /* string dashboard_group */ 2:
          message.dashboardGroup = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: GetDashboardGroupRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* string scope = 1; */
    if (message.scope !== '')
      writer.tag(1, WireType.LengthDelimited).string(message.scope);
    /* string dashboard_group = 2; */
    if (message.dashboardGroup !== '')
      writer.tag(2, WireType.LengthDelimited).string(message.dashboardGroup);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message testgrid.api.v1.GetDashboardGroupRequest
 */
export const GetDashboardGroupRequest = new GetDashboardGroupRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetDashboardGroupResponse$Type extends MessageType<GetDashboardGroupResponse> {
  constructor() {
    super('testgrid.api.v1.GetDashboardGroupResponse', [
      {
        no: 1,
        name: 'dashboards',
        kind: 'message',
        repeat: 1 /*RepeatType.PACKED*/,
        T: () => Resource,
      },
    ]);
  }
  create(
    value?: PartialMessage<GetDashboardGroupResponse>
  ): GetDashboardGroupResponse {
    const message = { dashboards: [] };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<GetDashboardGroupResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: GetDashboardGroupResponse
  ): GetDashboardGroupResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* repeated testgrid.api.v1.Resource dashboards */ 1:
          message.dashboards.push(
            Resource.internalBinaryRead(reader, reader.uint32(), options)
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: GetDashboardGroupResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* repeated testgrid.api.v1.Resource dashboards = 1; */
    for (let i = 0; i < message.dashboards.length; i++)
      Resource.internalBinaryWrite(
        message.dashboards[i],
        writer.tag(1, WireType.LengthDelimited).fork(),
        options
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message testgrid.api.v1.GetDashboardGroupResponse
 */
export const GetDashboardGroupResponse = new GetDashboardGroupResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListHeadersRequest$Type extends MessageType<ListHeadersRequest> {
  constructor() {
    super('testgrid.api.v1.ListHeadersRequest', [
      { no: 1, name: 'scope', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: 'dashboard', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 3, name: 'tab', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
    ]);
  }
  create(value?: PartialMessage<ListHeadersRequest>): ListHeadersRequest {
    const message = { scope: '', dashboard: '', tab: '' };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<ListHeadersRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ListHeadersRequest
  ): ListHeadersRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string scope */ 1:
          message.scope = reader.string();
          break;
        case /* string dashboard */ 2:
          message.dashboard = reader.string();
          break;
        case /* string tab */ 3:
          message.tab = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: ListHeadersRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* string scope = 1; */
    if (message.scope !== '')
      writer.tag(1, WireType.LengthDelimited).string(message.scope);
    /* string dashboard = 2; */
    if (message.dashboard !== '')
      writer.tag(2, WireType.LengthDelimited).string(message.dashboard);
    /* string tab = 3; */
    if (message.tab !== '')
      writer.tag(3, WireType.LengthDelimited).string(message.tab);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message testgrid.api.v1.ListHeadersRequest
 */
export const ListHeadersRequest = new ListHeadersRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListHeadersResponse$Type extends MessageType<ListHeadersResponse> {
  constructor() {
    super('testgrid.api.v1.ListHeadersResponse', [
      {
        no: 1,
        name: 'headers',
        kind: 'message',
        repeat: 1 /*RepeatType.PACKED*/,
        T: () => ListHeadersResponse_Header,
      },
    ]);
  }
  create(value?: PartialMessage<ListHeadersResponse>): ListHeadersResponse {
    const message = { headers: [] };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<ListHeadersResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ListHeadersResponse
  ): ListHeadersResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* repeated testgrid.api.v1.ListHeadersResponse.Header headers */ 1:
          message.headers.push(
            ListHeadersResponse_Header.internalBinaryRead(
              reader,
              reader.uint32(),
              options
            )
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: ListHeadersResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* repeated testgrid.api.v1.ListHeadersResponse.Header headers = 1; */
    for (let i = 0; i < message.headers.length; i++)
      ListHeadersResponse_Header.internalBinaryWrite(
        message.headers[i],
        writer.tag(1, WireType.LengthDelimited).fork(),
        options
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message testgrid.api.v1.ListHeadersResponse
 */
export const ListHeadersResponse = new ListHeadersResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListHeadersResponse_Header$Type extends MessageType<ListHeadersResponse_Header> {
  constructor() {
    super('testgrid.api.v1.ListHeadersResponse.Header', [
      { no: 1, name: 'build', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: 'name', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 3, name: 'started', kind: 'message', T: () => Timestamp },
      {
        no: 4,
        name: 'extra',
        kind: 'scalar',
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 5,
        name: 'hotlist_ids',
        kind: 'scalar',
        T: 9 /*ScalarType.STRING*/,
      },
    ]);
  }
  create(
    value?: PartialMessage<ListHeadersResponse_Header>
  ): ListHeadersResponse_Header {
    const message = { build: '', name: '', extra: [], hotlistIds: '' };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<ListHeadersResponse_Header>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ListHeadersResponse_Header
  ): ListHeadersResponse_Header {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string build */ 1:
          message.build = reader.string();
          break;
        case /* string name */ 2:
          message.name = reader.string();
          break;
        case /* google.protobuf.Timestamp started */ 3:
          message.started = Timestamp.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.started
          );
          break;
        case /* repeated string extra */ 4:
          message.extra.push(reader.string());
          break;
        case /* string hotlist_ids */ 5:
          message.hotlistIds = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: ListHeadersResponse_Header,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* string build = 1; */
    if (message.build !== '')
      writer.tag(1, WireType.LengthDelimited).string(message.build);
    /* string name = 2; */
    if (message.name !== '')
      writer.tag(2, WireType.LengthDelimited).string(message.name);
    /* google.protobuf.Timestamp started = 3; */
    if (message.started)
      Timestamp.internalBinaryWrite(
        message.started,
        writer.tag(3, WireType.LengthDelimited).fork(),
        options
      ).join();
    /* repeated string extra = 4; */
    for (let i = 0; i < message.extra.length; i++)
      writer.tag(4, WireType.LengthDelimited).string(message.extra[i]);
    /* string hotlist_ids = 5; */
    if (message.hotlistIds !== '')
      writer.tag(5, WireType.LengthDelimited).string(message.hotlistIds);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message testgrid.api.v1.ListHeadersResponse.Header
 */
export const ListHeadersResponse_Header = new ListHeadersResponse_Header$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListRowsRequest$Type extends MessageType<ListRowsRequest> {
  constructor() {
    super('testgrid.api.v1.ListRowsRequest', [
      { no: 1, name: 'scope', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: 'dashboard', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 3, name: 'tab', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
    ]);
  }
  create(value?: PartialMessage<ListRowsRequest>): ListRowsRequest {
    const message = { scope: '', dashboard: '', tab: '' };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<ListRowsRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ListRowsRequest
  ): ListRowsRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string scope */ 1:
          message.scope = reader.string();
          break;
        case /* string dashboard */ 2:
          message.dashboard = reader.string();
          break;
        case /* string tab */ 3:
          message.tab = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: ListRowsRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* string scope = 1; */
    if (message.scope !== '')
      writer.tag(1, WireType.LengthDelimited).string(message.scope);
    /* string dashboard = 2; */
    if (message.dashboard !== '')
      writer.tag(2, WireType.LengthDelimited).string(message.dashboard);
    /* string tab = 3; */
    if (message.tab !== '')
      writer.tag(3, WireType.LengthDelimited).string(message.tab);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message testgrid.api.v1.ListRowsRequest
 */
export const ListRowsRequest = new ListRowsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListRowsResponse$Type extends MessageType<ListRowsResponse> {
  constructor() {
    super('testgrid.api.v1.ListRowsResponse', [
      {
        no: 1,
        name: 'rows',
        kind: 'message',
        repeat: 1 /*RepeatType.PACKED*/,
        T: () => ListRowsResponse_Row,
      },
    ]);
  }
  create(value?: PartialMessage<ListRowsResponse>): ListRowsResponse {
    const message = { rows: [] };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<ListRowsResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ListRowsResponse
  ): ListRowsResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* repeated testgrid.api.v1.ListRowsResponse.Row rows */ 1:
          message.rows.push(
            ListRowsResponse_Row.internalBinaryRead(
              reader,
              reader.uint32(),
              options
            )
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: ListRowsResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* repeated testgrid.api.v1.ListRowsResponse.Row rows = 1; */
    for (let i = 0; i < message.rows.length; i++)
      ListRowsResponse_Row.internalBinaryWrite(
        message.rows[i],
        writer.tag(1, WireType.LengthDelimited).fork(),
        options
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message testgrid.api.v1.ListRowsResponse
 */
export const ListRowsResponse = new ListRowsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListRowsResponse_Row$Type extends MessageType<ListRowsResponse_Row> {
  constructor() {
    super('testgrid.api.v1.ListRowsResponse.Row', [
      { no: 1, name: 'name', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      {
        no: 2,
        name: 'cells',
        kind: 'message',
        repeat: 1 /*RepeatType.PACKED*/,
        T: () => ListRowsResponse_Cell,
      },
      {
        no: 3,
        name: 'issues',
        kind: 'scalar',
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: 9 /*ScalarType.STRING*/,
      },
      { no: 4, name: 'alert', kind: 'message', T: () => AlertInfo },
    ]);
  }
  create(value?: PartialMessage<ListRowsResponse_Row>): ListRowsResponse_Row {
    const message = { name: '', cells: [], issues: [] };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<ListRowsResponse_Row>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ListRowsResponse_Row
  ): ListRowsResponse_Row {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string name */ 1:
          message.name = reader.string();
          break;
        case /* repeated testgrid.api.v1.ListRowsResponse.Cell cells */ 2:
          message.cells.push(
            ListRowsResponse_Cell.internalBinaryRead(
              reader,
              reader.uint32(),
              options
            )
          );
          break;
        case /* repeated string issues */ 3:
          message.issues.push(reader.string());
          break;
        case /* testgrid.state.AlertInfo alert */ 4:
          message.alert = AlertInfo.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.alert
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: ListRowsResponse_Row,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* string name = 1; */
    if (message.name !== '')
      writer.tag(1, WireType.LengthDelimited).string(message.name);
    /* repeated testgrid.api.v1.ListRowsResponse.Cell cells = 2; */
    for (let i = 0; i < message.cells.length; i++)
      ListRowsResponse_Cell.internalBinaryWrite(
        message.cells[i],
        writer.tag(2, WireType.LengthDelimited).fork(),
        options
      ).join();
    /* repeated string issues = 3; */
    for (let i = 0; i < message.issues.length; i++)
      writer.tag(3, WireType.LengthDelimited).string(message.issues[i]);
    /* testgrid.state.AlertInfo alert = 4; */
    if (message.alert)
      AlertInfo.internalBinaryWrite(
        message.alert,
        writer.tag(4, WireType.LengthDelimited).fork(),
        options
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message testgrid.api.v1.ListRowsResponse.Row
 */
export const ListRowsResponse_Row = new ListRowsResponse_Row$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListRowsResponse_Cell$Type extends MessageType<ListRowsResponse_Cell> {
  constructor() {
    super('testgrid.api.v1.ListRowsResponse.Cell', [
      { no: 1, name: 'result', kind: 'scalar', T: 5 /*ScalarType.INT32*/ },
      { no: 2, name: 'cell_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 3, name: 'message', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 4, name: 'icon', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
    ]);
  }
  create(value?: PartialMessage<ListRowsResponse_Cell>): ListRowsResponse_Cell {
    const message = { result: 0, cellId: '', message: '', icon: '' };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<ListRowsResponse_Cell>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ListRowsResponse_Cell
  ): ListRowsResponse_Cell {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* int32 result */ 1:
          message.result = reader.int32();
          break;
        case /* string cell_id */ 2:
          message.cellId = reader.string();
          break;
        case /* string message */ 3:
          message.message = reader.string();
          break;
        case /* string icon */ 4:
          message.icon = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: ListRowsResponse_Cell,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* int32 result = 1; */
    if (message.result !== 0)
      writer.tag(1, WireType.Varint).int32(message.result);
    /* string cell_id = 2; */
    if (message.cellId !== '')
      writer.tag(2, WireType.LengthDelimited).string(message.cellId);
    /* string message = 3; */
    if (message.message !== '')
      writer.tag(3, WireType.LengthDelimited).string(message.message);
    /* string icon = 4; */
    if (message.icon !== '')
      writer.tag(4, WireType.LengthDelimited).string(message.icon);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message testgrid.api.v1.ListRowsResponse.Cell
 */
export const ListRowsResponse_Cell = new ListRowsResponse_Cell$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Resource$Type extends MessageType<Resource> {
  constructor() {
    super('testgrid.api.v1.Resource', [
      { no: 1, name: 'name', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: 'link', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
    ]);
  }
  create(value?: PartialMessage<Resource>): Resource {
    const message = { name: '', link: '' };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<Resource>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: Resource
  ): Resource {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string name */ 1:
          message.name = reader.string();
          break;
        case /* string link */ 2:
          message.link = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: Resource,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* string name = 1; */
    if (message.name !== '')
      writer.tag(1, WireType.LengthDelimited).string(message.name);
    /* string link = 2; */
    if (message.link !== '')
      writer.tag(2, WireType.LengthDelimited).string(message.link);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message testgrid.api.v1.Resource
 */
export const Resource = new Resource$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListTabSummariesRequest$Type extends MessageType<ListTabSummariesRequest> {
  constructor() {
    super('testgrid.api.v1.ListTabSummariesRequest', [
      { no: 1, name: 'scope', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: 'dashboard', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
    ]);
  }
  create(
    value?: PartialMessage<ListTabSummariesRequest>
  ): ListTabSummariesRequest {
    const message = { scope: '', dashboard: '' };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<ListTabSummariesRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ListTabSummariesRequest
  ): ListTabSummariesRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string scope */ 1:
          message.scope = reader.string();
          break;
        case /* string dashboard */ 2:
          message.dashboard = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: ListTabSummariesRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* string scope = 1; */
    if (message.scope !== '')
      writer.tag(1, WireType.LengthDelimited).string(message.scope);
    /* string dashboard = 2; */
    if (message.dashboard !== '')
      writer.tag(2, WireType.LengthDelimited).string(message.dashboard);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message testgrid.api.v1.ListTabSummariesRequest
 */
export const ListTabSummariesRequest = new ListTabSummariesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListTabSummariesResponse$Type extends MessageType<ListTabSummariesResponse> {
  constructor() {
    super('testgrid.api.v1.ListTabSummariesResponse', [
      {
        no: 1,
        name: 'tab_summaries',
        kind: 'message',
        repeat: 1 /*RepeatType.PACKED*/,
        T: () => TabSummary,
      },
    ]);
  }
  create(
    value?: PartialMessage<ListTabSummariesResponse>
  ): ListTabSummariesResponse {
    const message = { tabSummaries: [] };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<ListTabSummariesResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ListTabSummariesResponse
  ): ListTabSummariesResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* repeated testgrid.api.v1.TabSummary tab_summaries */ 1:
          message.tabSummaries.push(
            TabSummary.internalBinaryRead(reader, reader.uint32(), options)
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: ListTabSummariesResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* repeated testgrid.api.v1.TabSummary tab_summaries = 1; */
    for (let i = 0; i < message.tabSummaries.length; i++)
      TabSummary.internalBinaryWrite(
        message.tabSummaries[i],
        writer.tag(1, WireType.LengthDelimited).fork(),
        options
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message testgrid.api.v1.ListTabSummariesResponse
 */
export const ListTabSummariesResponse = new ListTabSummariesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTabSummaryRequest$Type extends MessageType<GetTabSummaryRequest> {
  constructor() {
    super('testgrid.api.v1.GetTabSummaryRequest', [
      { no: 1, name: 'scope', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: 'dashboard', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 3, name: 'tab', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
    ]);
  }
  create(value?: PartialMessage<GetTabSummaryRequest>): GetTabSummaryRequest {
    const message = { scope: '', dashboard: '', tab: '' };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<GetTabSummaryRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: GetTabSummaryRequest
  ): GetTabSummaryRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string scope */ 1:
          message.scope = reader.string();
          break;
        case /* string dashboard */ 2:
          message.dashboard = reader.string();
          break;
        case /* string tab */ 3:
          message.tab = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: GetTabSummaryRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* string scope = 1; */
    if (message.scope !== '')
      writer.tag(1, WireType.LengthDelimited).string(message.scope);
    /* string dashboard = 2; */
    if (message.dashboard !== '')
      writer.tag(2, WireType.LengthDelimited).string(message.dashboard);
    /* string tab = 3; */
    if (message.tab !== '')
      writer.tag(3, WireType.LengthDelimited).string(message.tab);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message testgrid.api.v1.GetTabSummaryRequest
 */
export const GetTabSummaryRequest = new GetTabSummaryRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTabSummaryResponse$Type extends MessageType<GetTabSummaryResponse> {
  constructor() {
    super('testgrid.api.v1.GetTabSummaryResponse', [
      { no: 1, name: 'tab_summary', kind: 'message', T: () => TabSummary },
    ]);
  }
  create(value?: PartialMessage<GetTabSummaryResponse>): GetTabSummaryResponse {
    const message = {};
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<GetTabSummaryResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: GetTabSummaryResponse
  ): GetTabSummaryResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* testgrid.api.v1.TabSummary tab_summary */ 1:
          message.tabSummary = TabSummary.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.tabSummary
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: GetTabSummaryResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* testgrid.api.v1.TabSummary tab_summary = 1; */
    if (message.tabSummary)
      TabSummary.internalBinaryWrite(
        message.tabSummary,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message testgrid.api.v1.GetTabSummaryResponse
 */
export const GetTabSummaryResponse = new GetTabSummaryResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListDashboardSummariesRequest$Type extends MessageType<ListDashboardSummariesRequest> {
  constructor() {
    super('testgrid.api.v1.ListDashboardSummariesRequest', [
      { no: 1, name: 'scope', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      {
        no: 2,
        name: 'dashboard_group',
        kind: 'scalar',
        T: 9 /*ScalarType.STRING*/,
      },
    ]);
  }
  create(
    value?: PartialMessage<ListDashboardSummariesRequest>
  ): ListDashboardSummariesRequest {
    const message = { scope: '', dashboardGroup: '' };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<ListDashboardSummariesRequest>(
        this,
        message,
        value
      );
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ListDashboardSummariesRequest
  ): ListDashboardSummariesRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string scope */ 1:
          message.scope = reader.string();
          break;
        case /* string dashboard_group */ 2:
          message.dashboardGroup = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: ListDashboardSummariesRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* string scope = 1; */
    if (message.scope !== '')
      writer.tag(1, WireType.LengthDelimited).string(message.scope);
    /* string dashboard_group = 2; */
    if (message.dashboardGroup !== '')
      writer.tag(2, WireType.LengthDelimited).string(message.dashboardGroup);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message testgrid.api.v1.ListDashboardSummariesRequest
 */
export const ListDashboardSummariesRequest =
  new ListDashboardSummariesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListDashboardSummariesResponse$Type extends MessageType<ListDashboardSummariesResponse> {
  constructor() {
    super('testgrid.api.v1.ListDashboardSummariesResponse', [
      {
        no: 1,
        name: 'dashboard_summaries',
        kind: 'message',
        repeat: 1 /*RepeatType.PACKED*/,
        T: () => DashboardSummary,
      },
    ]);
  }
  create(
    value?: PartialMessage<ListDashboardSummariesResponse>
  ): ListDashboardSummariesResponse {
    const message = { dashboardSummaries: [] };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<ListDashboardSummariesResponse>(
        this,
        message,
        value
      );
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ListDashboardSummariesResponse
  ): ListDashboardSummariesResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* repeated testgrid.api.v1.DashboardSummary dashboard_summaries */ 1:
          message.dashboardSummaries.push(
            DashboardSummary.internalBinaryRead(
              reader,
              reader.uint32(),
              options
            )
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: ListDashboardSummariesResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* repeated testgrid.api.v1.DashboardSummary dashboard_summaries = 1; */
    for (let i = 0; i < message.dashboardSummaries.length; i++)
      DashboardSummary.internalBinaryWrite(
        message.dashboardSummaries[i],
        writer.tag(1, WireType.LengthDelimited).fork(),
        options
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message testgrid.api.v1.ListDashboardSummariesResponse
 */
export const ListDashboardSummariesResponse =
  new ListDashboardSummariesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetDashboardSummaryRequest$Type extends MessageType<GetDashboardSummaryRequest> {
  constructor() {
    super('testgrid.api.v1.GetDashboardSummaryRequest', [
      { no: 1, name: 'scope', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: 'dashboard', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
    ]);
  }
  create(
    value?: PartialMessage<GetDashboardSummaryRequest>
  ): GetDashboardSummaryRequest {
    const message = { scope: '', dashboard: '' };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<GetDashboardSummaryRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: GetDashboardSummaryRequest
  ): GetDashboardSummaryRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string scope */ 1:
          message.scope = reader.string();
          break;
        case /* string dashboard */ 2:
          message.dashboard = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: GetDashboardSummaryRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* string scope = 1; */
    if (message.scope !== '')
      writer.tag(1, WireType.LengthDelimited).string(message.scope);
    /* string dashboard = 2; */
    if (message.dashboard !== '')
      writer.tag(2, WireType.LengthDelimited).string(message.dashboard);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message testgrid.api.v1.GetDashboardSummaryRequest
 */
export const GetDashboardSummaryRequest = new GetDashboardSummaryRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetDashboardSummaryResponse$Type extends MessageType<GetDashboardSummaryResponse> {
  constructor() {
    super('testgrid.api.v1.GetDashboardSummaryResponse', [
      {
        no: 1,
        name: 'dashboard_summary',
        kind: 'message',
        T: () => DashboardSummary,
      },
    ]);
  }
  create(
    value?: PartialMessage<GetDashboardSummaryResponse>
  ): GetDashboardSummaryResponse {
    const message = {};
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<GetDashboardSummaryResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: GetDashboardSummaryResponse
  ): GetDashboardSummaryResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* testgrid.api.v1.DashboardSummary dashboard_summary */ 1:
          message.dashboardSummary = DashboardSummary.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.dashboardSummary
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: GetDashboardSummaryResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* testgrid.api.v1.DashboardSummary dashboard_summary = 1; */
    if (message.dashboardSummary)
      DashboardSummary.internalBinaryWrite(
        message.dashboardSummary,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message testgrid.api.v1.GetDashboardSummaryResponse
 */
export const GetDashboardSummaryResponse =
  new GetDashboardSummaryResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TabSummary$Type extends MessageType<TabSummary> {
  constructor() {
    super('testgrid.api.v1.TabSummary', [
      {
        no: 1,
        name: 'dashboard_name',
        kind: 'scalar',
        T: 9 /*ScalarType.STRING*/,
      },
      { no: 2, name: 'tab_name', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      {
        no: 3,
        name: 'overall_status',
        kind: 'scalar',
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 4,
        name: 'detailed_status_message',
        kind: 'scalar',
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 5,
        name: 'last_run_timestamp',
        kind: 'message',
        T: () => Timestamp,
      },
      {
        no: 6,
        name: 'last_update_timestamp',
        kind: 'message',
        T: () => Timestamp,
      },
      {
        no: 7,
        name: 'latest_passing_build',
        kind: 'scalar',
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 8,
        name: 'failures_summary',
        kind: 'message',
        T: () => FailuresSummary,
      },
      {
        no: 9,
        name: 'healthiness_summary',
        kind: 'message',
        T: () => HealthinessSummary,
      },
    ]);
  }
  create(value?: PartialMessage<TabSummary>): TabSummary {
    const message = {
      dashboardName: '',
      tabName: '',
      overallStatus: '',
      detailedStatusMessage: '',
      latestPassingBuild: '',
    };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<TabSummary>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: TabSummary
  ): TabSummary {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string dashboard_name */ 1:
          message.dashboardName = reader.string();
          break;
        case /* string tab_name */ 2:
          message.tabName = reader.string();
          break;
        case /* string overall_status */ 3:
          message.overallStatus = reader.string();
          break;
        case /* string detailed_status_message */ 4:
          message.detailedStatusMessage = reader.string();
          break;
        case /* google.protobuf.Timestamp last_run_timestamp */ 5:
          message.lastRunTimestamp = Timestamp.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.lastRunTimestamp
          );
          break;
        case /* google.protobuf.Timestamp last_update_timestamp */ 6:
          message.lastUpdateTimestamp = Timestamp.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.lastUpdateTimestamp
          );
          break;
        case /* string latest_passing_build */ 7:
          message.latestPassingBuild = reader.string();
          break;
        case /* testgrid.api.v1.FailuresSummary failures_summary */ 8:
          message.failuresSummary = FailuresSummary.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.failuresSummary
          );
          break;
        case /* testgrid.api.v1.HealthinessSummary healthiness_summary */ 9:
          message.healthinessSummary = HealthinessSummary.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.healthinessSummary
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: TabSummary,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* string dashboard_name = 1; */
    if (message.dashboardName !== '')
      writer.tag(1, WireType.LengthDelimited).string(message.dashboardName);
    /* string tab_name = 2; */
    if (message.tabName !== '')
      writer.tag(2, WireType.LengthDelimited).string(message.tabName);
    /* string overall_status = 3; */
    if (message.overallStatus !== '')
      writer.tag(3, WireType.LengthDelimited).string(message.overallStatus);
    /* string detailed_status_message = 4; */
    if (message.detailedStatusMessage !== '')
      writer
        .tag(4, WireType.LengthDelimited)
        .string(message.detailedStatusMessage);
    /* google.protobuf.Timestamp last_run_timestamp = 5; */
    if (message.lastRunTimestamp)
      Timestamp.internalBinaryWrite(
        message.lastRunTimestamp,
        writer.tag(5, WireType.LengthDelimited).fork(),
        options
      ).join();
    /* google.protobuf.Timestamp last_update_timestamp = 6; */
    if (message.lastUpdateTimestamp)
      Timestamp.internalBinaryWrite(
        message.lastUpdateTimestamp,
        writer.tag(6, WireType.LengthDelimited).fork(),
        options
      ).join();
    /* string latest_passing_build = 7; */
    if (message.latestPassingBuild !== '')
      writer
        .tag(7, WireType.LengthDelimited)
        .string(message.latestPassingBuild);
    /* testgrid.api.v1.FailuresSummary failures_summary = 8; */
    if (message.failuresSummary)
      FailuresSummary.internalBinaryWrite(
        message.failuresSummary,
        writer.tag(8, WireType.LengthDelimited).fork(),
        options
      ).join();
    /* testgrid.api.v1.HealthinessSummary healthiness_summary = 9; */
    if (message.healthinessSummary)
      HealthinessSummary.internalBinaryWrite(
        message.healthinessSummary,
        writer.tag(9, WireType.LengthDelimited).fork(),
        options
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message testgrid.api.v1.TabSummary
 */
export const TabSummary = new TabSummary$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FailuresSummary$Type extends MessageType<FailuresSummary> {
  constructor() {
    super('testgrid.api.v1.FailuresSummary', [
      {
        no: 1,
        name: 'top_failing_tests',
        kind: 'message',
        repeat: 1 /*RepeatType.PACKED*/,
        T: () => FailingTestInfo,
      },
      { no: 2, name: 'failure_stats', kind: 'message', T: () => FailureStats },
    ]);
  }
  create(value?: PartialMessage<FailuresSummary>): FailuresSummary {
    const message = { topFailingTests: [] };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<FailuresSummary>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: FailuresSummary
  ): FailuresSummary {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* repeated testgrid.api.v1.FailingTestInfo top_failing_tests */ 1:
          message.topFailingTests.push(
            FailingTestInfo.internalBinaryRead(reader, reader.uint32(), options)
          );
          break;
        case /* testgrid.api.v1.FailureStats failure_stats */ 2:
          message.failureStats = FailureStats.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.failureStats
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: FailuresSummary,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* repeated testgrid.api.v1.FailingTestInfo top_failing_tests = 1; */
    for (let i = 0; i < message.topFailingTests.length; i++)
      FailingTestInfo.internalBinaryWrite(
        message.topFailingTests[i],
        writer.tag(1, WireType.LengthDelimited).fork(),
        options
      ).join();
    /* testgrid.api.v1.FailureStats failure_stats = 2; */
    if (message.failureStats)
      FailureStats.internalBinaryWrite(
        message.failureStats,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message testgrid.api.v1.FailuresSummary
 */
export const FailuresSummary = new FailuresSummary$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FailingTestInfo$Type extends MessageType<FailingTestInfo> {
  constructor() {
    super('testgrid.api.v1.FailingTestInfo', [
      {
        no: 1,
        name: 'display_name',
        kind: 'scalar',
        T: 9 /*ScalarType.STRING*/,
      },
      { no: 2, name: 'fail_count', kind: 'scalar', T: 5 /*ScalarType.INT32*/ },
      { no: 3, name: 'pass_timestamp', kind: 'message', T: () => Timestamp },
      { no: 4, name: 'fail_timestamp', kind: 'message', T: () => Timestamp },
    ]);
  }
  create(value?: PartialMessage<FailingTestInfo>): FailingTestInfo {
    const message = { displayName: '', failCount: 0 };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<FailingTestInfo>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: FailingTestInfo
  ): FailingTestInfo {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string display_name */ 1:
          message.displayName = reader.string();
          break;
        case /* int32 fail_count */ 2:
          message.failCount = reader.int32();
          break;
        case /* google.protobuf.Timestamp pass_timestamp */ 3:
          message.passTimestamp = Timestamp.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.passTimestamp
          );
          break;
        case /* google.protobuf.Timestamp fail_timestamp */ 4:
          message.failTimestamp = Timestamp.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.failTimestamp
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: FailingTestInfo,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* string display_name = 1; */
    if (message.displayName !== '')
      writer.tag(1, WireType.LengthDelimited).string(message.displayName);
    /* int32 fail_count = 2; */
    if (message.failCount !== 0)
      writer.tag(2, WireType.Varint).int32(message.failCount);
    /* google.protobuf.Timestamp pass_timestamp = 3; */
    if (message.passTimestamp)
      Timestamp.internalBinaryWrite(
        message.passTimestamp,
        writer.tag(3, WireType.LengthDelimited).fork(),
        options
      ).join();
    /* google.protobuf.Timestamp fail_timestamp = 4; */
    if (message.failTimestamp)
      Timestamp.internalBinaryWrite(
        message.failTimestamp,
        writer.tag(4, WireType.LengthDelimited).fork(),
        options
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message testgrid.api.v1.FailingTestInfo
 */
export const FailingTestInfo = new FailingTestInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FailureStats$Type extends MessageType<FailureStats> {
  constructor() {
    super('testgrid.api.v1.FailureStats', [
      {
        no: 1,
        name: 'num_failing_tests',
        kind: 'scalar',
        T: 5 /*ScalarType.INT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<FailureStats>): FailureStats {
    const message = { numFailingTests: 0 };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<FailureStats>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: FailureStats
  ): FailureStats {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* int32 num_failing_tests */ 1:
          message.numFailingTests = reader.int32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: FailureStats,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* int32 num_failing_tests = 1; */
    if (message.numFailingTests !== 0)
      writer.tag(1, WireType.Varint).int32(message.numFailingTests);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message testgrid.api.v1.FailureStats
 */
export const FailureStats = new FailureStats$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HealthinessSummary$Type extends MessageType<HealthinessSummary> {
  constructor() {
    super('testgrid.api.v1.HealthinessSummary', [
      {
        no: 1,
        name: 'top_flaky_tests',
        kind: 'message',
        repeat: 1 /*RepeatType.PACKED*/,
        T: () => FlakyTestInfo,
      },
      {
        no: 2,
        name: 'healthiness_stats',
        kind: 'message',
        T: () => HealthinessStats,
      },
    ]);
  }
  create(value?: PartialMessage<HealthinessSummary>): HealthinessSummary {
    const message = { topFlakyTests: [] };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<HealthinessSummary>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: HealthinessSummary
  ): HealthinessSummary {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* repeated testgrid.api.v1.FlakyTestInfo top_flaky_tests */ 1:
          message.topFlakyTests.push(
            FlakyTestInfo.internalBinaryRead(reader, reader.uint32(), options)
          );
          break;
        case /* testgrid.api.v1.HealthinessStats healthiness_stats */ 2:
          message.healthinessStats = HealthinessStats.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.healthinessStats
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: HealthinessSummary,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* repeated testgrid.api.v1.FlakyTestInfo top_flaky_tests = 1; */
    for (let i = 0; i < message.topFlakyTests.length; i++)
      FlakyTestInfo.internalBinaryWrite(
        message.topFlakyTests[i],
        writer.tag(1, WireType.LengthDelimited).fork(),
        options
      ).join();
    /* testgrid.api.v1.HealthinessStats healthiness_stats = 2; */
    if (message.healthinessStats)
      HealthinessStats.internalBinaryWrite(
        message.healthinessStats,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message testgrid.api.v1.HealthinessSummary
 */
export const HealthinessSummary = new HealthinessSummary$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FlakyTestInfo$Type extends MessageType<FlakyTestInfo> {
  constructor() {
    super('testgrid.api.v1.FlakyTestInfo', [
      {
        no: 1,
        name: 'display_name',
        kind: 'scalar',
        T: 9 /*ScalarType.STRING*/,
      },
      { no: 2, name: 'flakiness', kind: 'scalar', T: 2 /*ScalarType.FLOAT*/ },
      {
        no: 3,
        name: 'change',
        kind: 'enum',
        T: () => ['testgrid.summary.TestInfo.Trend', TestInfo_Trend],
      },
    ]);
  }
  create(value?: PartialMessage<FlakyTestInfo>): FlakyTestInfo {
    const message = { displayName: '', flakiness: 0, change: 0 };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<FlakyTestInfo>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: FlakyTestInfo
  ): FlakyTestInfo {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string display_name */ 1:
          message.displayName = reader.string();
          break;
        case /* float flakiness */ 2:
          message.flakiness = reader.float();
          break;
        case /* testgrid.summary.TestInfo.Trend change */ 3:
          message.change = reader.int32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: FlakyTestInfo,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* string display_name = 1; */
    if (message.displayName !== '')
      writer.tag(1, WireType.LengthDelimited).string(message.displayName);
    /* float flakiness = 2; */
    if (message.flakiness !== 0)
      writer.tag(2, WireType.Bit32).float(message.flakiness);
    /* testgrid.summary.TestInfo.Trend change = 3; */
    if (message.change !== 0)
      writer.tag(3, WireType.Varint).int32(message.change);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message testgrid.api.v1.FlakyTestInfo
 */
export const FlakyTestInfo = new FlakyTestInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HealthinessStats$Type extends MessageType<HealthinessStats> {
  constructor() {
    super('testgrid.api.v1.HealthinessStats', [
      { no: 1, name: 'start', kind: 'message', T: () => Timestamp },
      { no: 2, name: 'end', kind: 'message', T: () => Timestamp },
      {
        no: 3,
        name: 'num_flaky_tests',
        kind: 'scalar',
        T: 5 /*ScalarType.INT32*/,
      },
      {
        no: 4,
        name: 'average_flakiness',
        kind: 'scalar',
        T: 2 /*ScalarType.FLOAT*/,
      },
      {
        no: 5,
        name: 'previous_flakiness',
        kind: 'scalar',
        T: 2 /*ScalarType.FLOAT*/,
      },
    ]);
  }
  create(value?: PartialMessage<HealthinessStats>): HealthinessStats {
    const message = {
      numFlakyTests: 0,
      averageFlakiness: 0,
      previousFlakiness: 0,
    };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<HealthinessStats>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: HealthinessStats
  ): HealthinessStats {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* google.protobuf.Timestamp start */ 1:
          message.start = Timestamp.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.start
          );
          break;
        case /* google.protobuf.Timestamp end */ 2:
          message.end = Timestamp.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.end
          );
          break;
        case /* int32 num_flaky_tests */ 3:
          message.numFlakyTests = reader.int32();
          break;
        case /* float average_flakiness */ 4:
          message.averageFlakiness = reader.float();
          break;
        case /* float previous_flakiness */ 5:
          message.previousFlakiness = reader.float();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: HealthinessStats,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* google.protobuf.Timestamp start = 1; */
    if (message.start)
      Timestamp.internalBinaryWrite(
        message.start,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options
      ).join();
    /* google.protobuf.Timestamp end = 2; */
    if (message.end)
      Timestamp.internalBinaryWrite(
        message.end,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options
      ).join();
    /* int32 num_flaky_tests = 3; */
    if (message.numFlakyTests !== 0)
      writer.tag(3, WireType.Varint).int32(message.numFlakyTests);
    /* float average_flakiness = 4; */
    if (message.averageFlakiness !== 0)
      writer.tag(4, WireType.Bit32).float(message.averageFlakiness);
    /* float previous_flakiness = 5; */
    if (message.previousFlakiness !== 0)
      writer.tag(5, WireType.Bit32).float(message.previousFlakiness);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message testgrid.api.v1.HealthinessStats
 */
export const HealthinessStats = new HealthinessStats$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DashboardSummary$Type extends MessageType<DashboardSummary> {
  constructor() {
    super('testgrid.api.v1.DashboardSummary', [
      { no: 1, name: 'name', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      {
        no: 2,
        name: 'overall_status',
        kind: 'scalar',
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 3,
        name: 'tab_status_count',
        kind: 'map',
        K: 9 /*ScalarType.STRING*/,
        V: { kind: 'scalar', T: 5 /*ScalarType.INT32*/ },
      },
    ]);
  }
  create(value?: PartialMessage<DashboardSummary>): DashboardSummary {
    const message = { name: '', overallStatus: '', tabStatusCount: {} };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<DashboardSummary>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: DashboardSummary
  ): DashboardSummary {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string name */ 1:
          message.name = reader.string();
          break;
        case /* string overall_status */ 2:
          message.overallStatus = reader.string();
          break;
        case /* map<string, int32> tab_status_count */ 3:
          this.binaryReadMap3(message.tabStatusCount, reader, options);
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  private binaryReadMap3(
    map: DashboardSummary['tabStatusCount'],
    reader: IBinaryReader,
    options: BinaryReadOptions
  ): void {
    let len = reader.uint32(),
      end = reader.pos + len,
      key: keyof DashboardSummary['tabStatusCount'] | undefined,
      val: DashboardSummary['tabStatusCount'][any] | undefined;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case 1:
          key = reader.string();
          break;
        case 2:
          val = reader.int32();
          break;
        default:
          throw new globalThis.Error(
            'unknown map entry field for field testgrid.api.v1.DashboardSummary.tab_status_count'
          );
      }
    }
    map[key ?? ''] = val ?? 0;
  }
  internalBinaryWrite(
    message: DashboardSummary,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* string name = 1; */
    if (message.name !== '')
      writer.tag(1, WireType.LengthDelimited).string(message.name);
    /* string overall_status = 2; */
    if (message.overallStatus !== '')
      writer.tag(2, WireType.LengthDelimited).string(message.overallStatus);
    /* map<string, int32> tab_status_count = 3; */
    for (let k of Object.keys(message.tabStatusCount))
      writer
        .tag(3, WireType.LengthDelimited)
        .fork()
        .tag(1, WireType.LengthDelimited)
        .string(k)
        .tag(2, WireType.Varint)
        .int32(message.tabStatusCount[k])
        .join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message testgrid.api.v1.DashboardSummary
 */
export const DashboardSummary = new DashboardSummary$Type();
/**
 * @generated ServiceType for protobuf service testgrid.api.v1.TestGridData
 */
export const TestGridData = new ServiceType('testgrid.api.v1.TestGridData', [
  {
    name: 'ListDashboard',
    options: {},
    I: ListDashboardRequest,
    O: ListDashboardResponse,
  },
  {
    name: 'ListDashboardGroup',
    options: {},
    I: ListDashboardGroupRequest,
    O: ListDashboardGroupResponse,
  },
  {
    name: 'ListDashboardTabs',
    options: {},
    I: ListDashboardTabsRequest,
    O: ListDashboardTabsResponse,
  },
  {
    name: 'GetDashboard',
    options: {},
    I: GetDashboardRequest,
    O: GetDashboardResponse,
  },
  {
    name: 'GetDashboardGroup',
    options: {},
    I: GetDashboardGroupRequest,
    O: GetDashboardGroupResponse,
  },
  {
    name: 'ListHeaders',
    options: {},
    I: ListHeadersRequest,
    O: ListHeadersResponse,
  },
  { name: 'ListRows', options: {}, I: ListRowsRequest, O: ListRowsResponse },
  {
    name: 'ListTabSummaries',
    options: {},
    I: ListTabSummariesRequest,
    O: ListTabSummariesResponse,
  },
  {
    name: 'GetTabSummary',
    options: {},
    I: GetTabSummaryRequest,
    O: GetTabSummaryResponse,
  },
  {
    name: 'ListDashboardSummaries',
    options: {},
    I: ListDashboardSummariesRequest,
    O: ListDashboardSummariesResponse,
  },
  {
    name: 'GetDashboardSummary',
    options: {},
    I: GetDashboardSummaryRequest,
    O: GetDashboardSummaryResponse,
  },
]);
